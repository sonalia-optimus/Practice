<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketTools.SocketWrench</name>
    </assembly>
    <members>
        <member name="T:SocketTools.SocketWrench">
            <summary>
            A general purpose TCP/IP networking class for developing client and server
            applications.
            </summary>
            <requirements>
            	<para><strong>Namespace:</strong> SocketTools</para>
            	<para><strong>Platforms:</strong> Windows XP, Windows Server 2003,
                Windows Vista, Windows 7, Windows Server 2008, Windows 8 Desktop,
                Windows Server 2012, Windows 10 Desktop, Windows Server 2016</para>
            	<para><strong>Assembly:</strong> SocketTools.SocketWrench.dll</para>
            </requirements>
            <remarks>
            	<para>At the core of each of the SocketTools networking classes is the Windows
                Sockets API. This provides a low level interface for sending and receiving data
                over the Internet or a local intranet using the Transmission Control Protocol (TCP)
                and/or User Datagram Protocol (UDP). The SocketWrench class provides a simpler
                interface to the Windows Sockets API, without sacrificing features or
                functionality. Using SocketWrench, you can easily create client and server
                applications while avoiding many of the mundane tasks and common problems that
                programmers face when developing Internet applications.</para>
            	<para>This class supports secure connections using the standard SSL and TLS
                protocols and can also be used to create secure, custom server programs. Both
                implicit and explicit SSL connections are supported, enabling the class to work
                with a wide variety of client and server applications without requiring that you
                use third-party classes or understand Microsoft's cryptography classes.</para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.#ctor">
            <summary>Initializes a new instance of the SocketWrench class.</summary>
            <example>
                The following example demonstrates creating an instance of the
                <strong>SocketWrench</strong> class object and resolving a hostname into an
                Internet address using the <see cref="M:SocketTools.SocketWrench.Resolve(System.String,System.String@)">Resolve</see> method. 
                <code lang="VB" title="[Visual Basic]">
            Dim Socket As SocketTools.SocketWrench
            Dim strHostName As String
            Dim strHostAddress As String
             
            Socket = New SocketTools.SocketWrench
            strHostName = TextBox1.Text.Trim()
             
            If Socket.Resolve(strHostName, strHostAddress) Then
                StatusBar1.Text = "The Internet address for " + strHostName + " is " + strHostAddress
            Else
                StatusBar1.Text = "The Internet address for " + strHostName + " could not be resolved"
            End If
                </code>
            </example>
        </member>
        <member name="M:SocketTools.SocketWrench.Finalize">
            <summary>
            Destroys an instance of the class, releasing the resources allocated for the
            session and unloading the networking library.
            </summary>
        </member>
        <member name="M:SocketTools.SocketWrench.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources allocated by the
                <see cref="T:SocketTools.SocketWrench">SocketWrench</see> class and optionally releases the managed
                resources.
            </summary>
            <remarks>
            	<para>The <strong>Dispose</strong> method terminates any active connection and explicitly
                releases the resources allocated for this instance of the class. In some cases,
                better performance can be achieved if the programmer explicitly releases resources
                when they are no longer being used. The <strong>Dispose</strong> method provides
                explicit control over these resources.</para>
            	<para>Unlike the <strong>Uninitialize</strong> method, once the
                <strong>Dispose</strong> method has been called, that instance of the class cannot
                be re-initialized and you should not attempt to access class properties or invoke
                any methods. Note that this method can be called even if other references to the
                object are active.</para>
            	<para>You should call <strong>Dispose</strong> in your derived class when you are finished
                using the derived class. The <strong>Dispose</strong> method leaves the derived class in an
                unusable state. After calling <strong>Dispose</strong>, you must release all references to
                the derived class and the <strong>SocketWrench</strong> class so the memory they were occupying
                can be reclaimed by garbage collection.</para>
            </remarks>
            <param name="disposing">
            	<para>A boolean value which should be specified as <strong>true</strong> to release
                both managed and unmanaged resources; <strong>false</strong> to release only unmanaged
                resources.</para>
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Dispose">
            <summary>Releases all resources used by <see cref="T:SocketTools.SocketWrench">SocketWrench</see>.</summary>
            <remarks>
            	<para>The <strong>Dispose</strong> method terminates any active connection and explicitly
                releases the resources allocated for this instance of the class. In some cases,
                better performance can be achieved if the programmer explicitly releases resources
                when they are no longer being used. The <strong>Dispose</strong> method provides
                explicit control over these resources.</para>
            	<para>Unlike the <strong>Uninitialize</strong> method, once the
                <strong>Dispose</strong> method has been called, that instance of the class cannot
                be re-initialized and you should not attempt to access class properties or invoke
                any methods. Note that this method can be called even if other references to the
                object are active.</para>
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.AdapterAddress">
            <summary>Returns the IP address associated with the specified network adapter.</summary>
            <value>
            A string which specifies the Internet address assigned to a network
            adapter.
            </value>
            <remarks>
            	<para>The <strong>AdapterAddress</strong> array returns the IP addresses that are
                associated with the local network or remote dial-up network adapters configured on
                the system. The <strong>AdapterCount</strong> property can be used to determine the number of
                adapters that are available.</para>
            	<para>Multihomed systems with more than one local network adapter, or a
                combination of local and dial-up adapters will not be listed in a specific order.
                An application should not make the assumption that the first address returned by
                <strong>AdapterAddress</strong> always refers to a local network adapter.</para>
            	<para>Note that it is possible that the <strong>AdapterCount</strong> property will return 0,
                and <strong>AdapterAddress</strong> will return an empty string. This indicates that the
                system does not have a physical network adapter with an assigned IP address, and
                there are no dial-up networking connections currently active. If a dial-up
                networking connection is established at some later point, the <strong>AdapterCount</strong>
                property will change to 1, and the <strong>AdapterAddress</strong> property will return the
                IP address allocated for that connection.</para>
            </remarks>
            <seealso cref="T:SocketTools.SocketWrench.AdapterAddressArray">AdapterAddressArray Class</seealso>
            <seealso cref="P:SocketTools.SocketWrench.AdapterCount">AdapterCount Property</seealso>
        </member>
        <member name="F:SocketTools.SocketWrench.HostAlias">
            <summary>Returns the aliases for a given host name.</summary>
            <example>
            	<code lang="VB" title="[Visual Basic]">
            Dim nIndex As Integer
             
            ListBox1.Items.Clear()
            Socket.HostName = strHostName
             
            For nIndex = 0 To Socket.HostAliases - 1
                ListBox1.Items.Add(Socket.HostAlias(nIndex))
            Next
                </code>
            </example>
            <value>A string which specifies the alias for the host name.</value>
            <remarks>
            	<para>The <strong>HostAlias</strong> array returns the aliases assigned to
                the host specified by the <strong>HostAddress</strong> or <strong>HostName</strong>
                properties. If the host address or name can be resolved, the first element in the
                <strong>HostAlias</strong> array always refers to the host's fully qualified domain
                name.</para>
            	<para>The end of the alias list is indicated when the property returns an empty
                string. The array is zero based, meaning that the first index value is
                zero.</para>
            </remarks>
            <seealso cref="T:SocketTools.SocketWrench.HostAliasArray">HostAliasArray Class</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Abort">
            <remarks>
            	<para>The <strong>Abort</strong> method immediately closes the socket, without waiting for
                any remaining data to be written out. This method should only be used when the
                connection must be closed immediately. If this method is used, the remote host will
                see the connection as being terminated abnormally.</para>
            	<para>It is recommended that applications using the <strong>Disconnect</strong>
                method unless it is absolutely necessary to terminate the connection and
                immediately release the socket handle.</para>
            </remarks>
            <summary>Abort the connection with a remote host.</summary>
            <seealso cref="M:SocketTools.SocketWrench.Disconnect">Disconnect Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">
            <summary>
            Accepts a client connection on a listening socket, specifying a timeout period
            and one or more socket options.
            </summary>
            <returns>
                A boolean value which specifies if the client connection has been accepted. If the
                method returns <strong>true</strong>, the connection has been accepted and the application may send
                and receive data with the remote host. If this method returns <strong>false</strong>, the connection
                could not be accepted and the application should check the value of the
                <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                failure.
            </returns>
            <seealso cref="M:SocketTools.SocketWrench.Listen(System.String,System.Int32,System.Int32)">Listen Method</seealso>
            <param name="handle">
            The socket identifier of a listening socket. If the object that invokes this
            method is not the listening socket, then the listening socket may continue to listen
            for incoming connections. If the object of a listening socket invokes this method with
            its own handle, then it ceases to listen, and no other host can establish a connection
            with the application.
            </param>
            <param name="timeout">
            Specifies the number of seconds that the method will wait for a client connection
            to be established on the listening socket. This value only has meaning for a blocking
            socket.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Accept(System.Int32,SocketTools.SocketWrench.SocketOptions)">
            <summary>
            Accepts a client connection on a listening socket, specifying one or more socket
            options.
            </summary>
            <returns>
            A boolean value which specifies if the client connection has been accepted. If
            the method returns <strong>true</strong>, the connection has been accepted and the application may send
            and receive data with the remote host. If this method returns <strong>false</strong>, the connection
            could not be accepted and the application should check the value of the
            <strong>LastError</strong> property to determine the cause of the failure.
            </returns>
            <seealso cref="M:SocketTools.SocketWrench.Listen(System.String,System.Int32,System.Int32)">Listen Method</seealso>
            <param name="handle">
            The socket identifier of a listening socket. If the object that invokes this
            method is not the listening socket, then the listening socket may continue to listen
            for incoming connections. If the object of a listening socket invokes this method with
            its own handle, then it ceases to listen, and no other host can establish a connection
            with the application.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Accept(System.Int32)">
            <summary>Accepts a client connection on a listening socket.</summary>
            <returns>
            A boolean value which specifies if the client connection has been accepted. If
            the method returns <strong>true</strong>, the connection has been accepted and the application may send
            and receive data with the remote host. If this method returns <strong>false</strong>, the connection
            could not be accepted and the application should check the value of the
            <strong>LastError</strong> property to determine the cause of the failure.
            </returns>
            <seealso cref="M:SocketTools.SocketWrench.Listen(System.String,System.Int32,System.Int32)">Listen Method</seealso>
            <param name="handle">
            The socket identifier of a listening socket. If the object that invokes this
            method is not the listening socket, then the listening socket may continue to listen
            for incoming connections. If the object of a listening socket invokes this method with
            its own handle, then it ceases to listen, and no other host can establish a connection
            with the application.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.AttachThread">
            <summary>Attach an instance of the class to the current thread</summary>
            <returns>
            	<para>
                    A boolean value which specifies if the socket could be attached to the current
                    thread. If this method returns <strong>false</strong>, the socket could not be
                    attached to the thread and the application should check the value of the
                    <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                    failure.
                </para>
            </returns>
            <remarks>
            	<para>When an instance of the class is created it is associated with the current
                thread that created it. Normally, if another thread attempts to perform an
                operation using that instance, an error is returned. This is used to ensure that
                other threads cannot interfere with an operation being performed by the owner
                thread. In some cases, it may be desirable for one thread in an application to
                create an instance of the class, establish a connection and then pass that instance
                to another worker thread. The <strong>AttachThread</strong> method can be used to change the
                ownership of the class instance to the new worker thread.</para>
            	<para>This method should be called by the new thread immediately after it has been
                created, and if the new thread does not release the handle itself, the ownership of
                the handle should be restored by the original thread. Under no circumstances should
                <strong>AttachThread</strong> be used to forcibly destroy an instance of a class allocated by
                another thread while a blocking operation is in progress. To cancel a blocking
                operation, use the <strong>Cancel</strong> method and then delete the class instance after
                the blocking function exits and control is returned to the current thread.</para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.Bind(System.String,System.Int32,SocketTools.SocketWrench.SocketProtocol,SocketTools.SocketWrench.SocketOptions)">
            <summary>Bind the socket to the specified local address and port number.</summary>
            <returns>
            	<para>
                    A boolean value which specifies if the socket could be bound to the specified
                    address. If this method returns <strong>false</strong>, the socket could not be
                    bound to the address and the application should check the value of the
                    <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                    failure.
                </para>
            </returns>
            <remarks>
            	<para>The <strong>Bind</strong> method is used to specify the local address and
                port number that a socket will be bound to when it is created. When this method is
                called with <strong>socketDatagram</strong> as the specified protocol, it will
                immediately create the datagram socket and bind it to the given address.</para>
            	<para>When this method is called with <strong>socketStream</strong> as the
                specified protocol, creation of the socket is deferred until the
                <strong>Connect</strong> method is called. For stream sockets, this method will set
                the local address, port number and default options used when the socket is actually
                created.</para>
            </remarks>
            <param name="localAddress">
            A string which specifies the local Internet address that the socket should be
            bound to. To bind to any valid network interface on the local system, specify the
            address 0.0.0.0. Applications should only specify a particular address if it is
            absolutely necessary. In most cases a local address is not required when establishing a
            client connection.
            </param>
            <param name="localPort">
            An integer value which specifies a local port number that the socket should be
            bound to. To bind to any available port number, specify a port number of 0.
            Applications should only specify a particular port number if it is absolutely
            necessary. The maximum valid port number is 65535.
            </param>
            <param name="protocol">
             One of the <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see>
             enumeration values which specify the type of socket to be created.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Bind(System.String,System.Int32,SocketTools.SocketWrench.SocketOptions)">
            <summary>Bind the socket to the specified local address and port number.</summary>
            <returns>
            	<para>
                    A boolean value which specifies if the socket could be bound to the specified
                    address. If this method returns <strong>false</strong>, the socket could not be
                    bound to the address and the application should check the value of the
                    <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                    failure.
                </para>
            </returns>
            <remarks>
            	<para>The <strong>Bind</strong> method is used to specify the local address and
                port number that a socket will be bound to when it is created. When this method is
                called with <strong>socketDatagram</strong> as the specified protocol, it will
                immediately create the datagram socket and bind it to the given address.</para>
            	<para>When this method is called with <strong>socketStream</strong> as the
                specified protocol, creation of the socket is deferred until the
                <strong>Connect</strong> method is called. For stream sockets, this method will set
                the local address, port number and default options used when the socket is actually
                created.</para>
            </remarks>
            <param name="localAddress">
            A string which specifies the local Internet address that the socket should be
            bound to. To bind to any valid network interface on the local system, specify the
            address 0.0.0.0. Applications should only specify a particular address if it is
            absolutely necessary. In most cases a local address is not required when establishing a
            client connection.
            </param>
            <param name="localPort">
            An integer value which specifies a local port number that the socket should be
            bound to. To bind to any available port number, specify a port number of 0.
            Applications should only specify a particular port number if it is absolutely
            necessary. The maximum valid port number is 65535.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Bind(System.String,System.Int32,SocketTools.SocketWrench.SocketProtocol)">
            <summary>Bind the socket to the specified local address and port number.</summary>
            <returns>
            	<para>
                    A boolean value which specifies if the socket could be bound to the specified
                    address. If this method returns <strong>false</strong>, the socket could not be
                    bound to the address and the application should check the value of the
                    <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                    failure.
                </para>
            </returns>
            <remarks>
            	<para>The <strong>Bind</strong> method is used to specify the local address and
                port number that a socket will be bound to when it is created. When this method is
                called with <strong>socketDatagram</strong> as the specified protocol, it will
                immediately create the datagram socket and bind it to the given address.</para>
            	<para>When this method is called with <strong>socketStream</strong> as the
                specified protocol, creation of the socket is deferred until the
                <strong>Connect</strong> method is called. For stream sockets, this method will set
                the local address, port number and default options used when the socket is actually
                created.</para>
            </remarks>
            <param name="localAddress">
            A string which specifies the local Internet address that the socket should be
            bound to. To bind to any valid network interface on the local system, specify the
            address 0.0.0.0. Applications should only specify a particular address if it is
            absolutely necessary. In most cases a local address is not required when establishing a
            client connection.
            </param>
            <param name="localPort">
            An integer value which specifies a local port number that the socket should be
            bound to. To bind to any available port number, specify a port number of 0.
            Applications should only specify a particular port number if it is absolutely
            necessary. The maximum valid port number is 65535.
            </param>
            <param name="protocol">
             One of the <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see>
             enumeration values which specify the type of socket to be created.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Bind(System.String,System.Int32)">
            <summary>Bind the socket to the specified local address and port number.</summary>
            <returns>
            	<para>
                    A boolean value which specifies if the socket could be bound to the specified
                    address. If this method returns <strong>false</strong>, the socket could not be
                    bound to the address and the application should check the value of the
                    <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of the
                    failure.
                </para>
            </returns>
            <remarks>
            	<para>The <strong>Bind</strong> method is used to specify the local address and
                port number that a socket will be bound to when it is created. When this method is
                called with <strong>socketDatagram</strong> as the specified protocol, it will
                immediately create the datagram socket and bind it to the given address.</para>
            	<para>When this method is called with <strong>socketStream</strong> as the
                specified protocol, creation of the socket is deferred until the
                <strong>Connect</strong> method is called. For stream sockets, this method will set
                the local address, port number and default options used when the socket is actually
                created.</para>
            </remarks>
            <param name="localAddress">
            A string which specifies the local Internet address that the socket should be
            bound to. To bind to any valid network interface on the local system, specify the
            address 0.0.0.0. Applications should only specify a particular address if it is
            absolutely necessary. In most cases a local address is not required when establishing a
            client connection.
            </param>
            <param name="localPort">
            An integer value which specifies a local port number that the socket should be
            bound to. To bind to any available port number, specify a port number of 0.
            Applications should only specify a particular port number if it is absolutely
            necessary. The maximum valid port number is 65535.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Cancel">
            <summary>Cancel the current blocking socket operation.</summary>
            <remarks>
            When the <strong>Cancel</strong> method is called, the blocking socket operation will not
            immediately fail. An internal flag is set which causes the blocking operation to exit
            with an error. This means that the application cannot cancel an operation and
            immediately perform some other blocking function. Instead it must allow the calling
            stack to unwind, returning back to the blocking operation before making any further
            function calls.
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect(System.String,System.Int32,SocketTools.SocketWrench.SocketProtocol,System.Int32,SocketTools.SocketWrench.SocketOptions,System.String,System.Int32)">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            	<para>A boolean value which specifies if the connection has been established. If
                the socket is in blocking mode, a return value of <strong>true</strong> indicates
                that the connection has completed and the application may send and receive data
                from the remote host. If the socket is in non-blocking mode, a return value of
                <strong>true</strong> indicates that the socket has been successfully created and
                the connection is in progress.</para>
            	<para>
                    When a non-blocking connection has completed, the <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
                    event will be fired. If this method returns <strong>false</strong>, the
                    connection could not be established and the application should check the value
                    of the <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of
                    the failure.
                </para>
            </returns>
            <remarks>
            When this method is called with <strong>socketDatagram</strong> as the specified
            protocol, it does not actually establish a connection. Instead, it simply establishes a
            default destination address and port that is used with subsequent calls to the
            <see cref="M:SocketTools.SocketWrench.Read(System.Byte[],System.Int32)">Read</see> and <see cref="M:SocketTools.SocketWrench.Write(System.Byte[],System.Int32)">Write</see> methods.
            </remarks>
            <param name="hostName">
            A string which specifies the remote host to establish a connection with. This may
            specify a host name or an Internet address in dot-notation.
            </param>
            <param name="hostPort">
            An integer which specifies the port number for the connection. This value must be
            greater than zero and the maximum valid port number is 65535.
            </param>
            <param name="protocol">
             One of the <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see>
             enumeration values which specify the type of socket to be created.
            </param>
            <param name="timeout">
            An integer value that specifies the number of seconds that the method will wait
            for the connection to complete before failing the operation and returning to the
            caller. This value is only meaningful for blocking sockets.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
            <param name="localAddress">
            A string which specifies the local Internet address that the socket should be
            bound to. To bind to any valid network interface on the local system, specify the
            address 0.0.0.0. Applications should only specify a particular address if it is
            absolutely necessary. In most cases a local address is not required when establishing a
            client connection.
            </param>
            <param name="localPort">
            An integer value which specifies a local port number that the socket should be
            bound to. To bind to any available port number, specify a port number of 0.
            Applications should only specify a particular port number if it is absolutely
            necessary. The maximum valid port number is 65535.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect(System.String,System.Int32,SocketTools.SocketWrench.SocketProtocol,System.Int32,SocketTools.SocketWrench.SocketOptions)">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            	<para>A boolean value which specifies if the connection has been established. If
                the socket is in blocking mode, a return value of <strong>true</strong> indicates
                that the connection has completed and the application may send and receive data
                from the remote host. If the socket is in non-blocking mode, a return value of
                <strong>true</strong> indicates that the socket has been successfully created and
                the connection is in progress.</para>
            	<para>
                    When a non-blocking connection has completed, the <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
                    event will be fired. If this method returns <strong>false</strong>, the
                    connection could not be established and the application should check the value
                    of the <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of
                    the failure.
                </para>
            </returns>
            <remarks>
            When this method is called with <strong>socketDatagram</strong> as the specified
            protocol, it does not actually establish a connection. Instead, it simply establishes a
            default destination address and port that is used with subsequent calls to the
            <strong>Read</strong> and <strong>Write</strong> methods.
            </remarks>
            <param name="hostName">
            A string which specifies the remote host to establish a connection with. This may
            specify a host name or an Internet address in dot-notation.
            </param>
            <param name="hostPort">
            An integer which specifies the port number for the connection. This value must be
            greater than zero and the maximum valid port number is 65535.
            </param>
            <param name="protocol">
             One of the <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see>
             enumeration values which specify the type of socket to be created.
            </param>
            <param name="timeout">
            An integer value that specifies the number of seconds that the method will wait
            for the connection to complete before failing the operation and returning to the
            caller. This value is only meaningful for blocking sockets.
            </param>
            <param name="options">
             One or more of the <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
             enumeration flags.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect(System.String,System.Int32,SocketTools.SocketWrench.SocketProtocol,System.Int32)">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            	<para>A boolean value which specifies if the connection has been established. If
                the socket is in blocking mode, a return value of <strong>true</strong> indicates
                that the connection has completed and the application may send and receive data
                from the remote host. If the socket is in non-blocking mode, a return value of
                <strong>true</strong> indicates that the socket has been successfully created and
                the connection is in progress.</para>
            	<para>
                    When a non-blocking connection has completed, the <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
                    event will be fired. If this method returns <strong>false</strong>, the
                    connection could not be established and the application should check the value
                    of the <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of
                    the failure.
                </para>
            </returns>
            <remarks>
            When this method is called with <strong>socketDatagram</strong> as the specified
            protocol, it does not actually establish a connection. Instead, it simply establishes a
            default destination address and port that is used with subsequent calls to the
            <strong>Read</strong> and <strong>Write</strong> methods.
            </remarks>
            <param name="hostName">
            A string which specifies the remote host to establish a connection with. This may
            specify a host name or an Internet address in dot-notation.
            </param>
            <param name="hostPort">
            An integer which specifies the port number for the connection. This value must be
            greater than zero and the maximum valid port number is 65535.
            </param>
            <param name="protocol">
             One of the <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see>
             enumeration values which specify the type of socket to be created.
            </param>
            <param name="timeout">
            An integer value that specifies the number of seconds that the method will wait
            for the connection to complete before failing the operation and returning to the
            caller. This value is only meaningful for blocking sockets.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect(System.String,System.Int32,System.Int32)">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            	<para>A boolean value which specifies if the connection has been established. If
                the socket is in blocking mode, a return value of <strong>true</strong> indicates
                that the connection has completed and the application may send and receive data
                from the remote host. If the socket is in non-blocking mode, a return value of
                <strong>true</strong> indicates that the socket has been successfully created and
                the connection is in progress.</para>
            	<para>
                    When a non-blocking connection has completed, the <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
                    event will be fired. If this method returns <strong>false</strong>, the
                    connection could not be established and the application should check the value
                    of the <see cref="P:SocketTools.SocketWrench.LastError">LastError</see> property to determine the cause of
                    the failure.
                </para>
            </returns>
            <remarks>
            This method will use the value of the
            <see cref="P:SocketTools.SocketWrench.Protocol">Protocol</see>
            property to determine which protocol is used to establish the connection. By default,
            the <strong>socketStream</strong> protocol will be used.
            </remarks>
            <param name="hostName">
            A string which specifies the remote host to establish a connection with. This may
            specify a host name or an Internet address in dot-notation.
            </param>
            <param name="hostPort">
            An integer which specifies the port number for the connection. This value must be
            greater than zero and the maximum valid port number is 65535.
            </param>
            <param name="timeout">
            An integer value that specifies the number of seconds that the method will wait
            for the connection to complete before failing the operation and returning to the
            caller. This value is only meaningful for blocking sockets.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect(System.String,System.Int32)">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            A boolean value which specifies if the connection has been established. If the
            socket is in blocking mode, a return value of <strong>true</strong> indicates that the connection has
            completed and the application may send and receive data from the remote host. If the
            socket is in non-blocking mode, a return value of <strong>true</strong> indicates that the socket has
            been successfully created and the connection is in progress. When the connection has
            completed, the
            <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
            event will be fired. If this method returns <strong>false</strong>, the connection could not be
            established and the application should check the value of the
            <see cref="P:SocketTools.SocketWrench.LastError">LastError</see>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            This method will use the value of the
            <see cref="P:SocketTools.SocketWrench.Protocol">Protocol</see>
            property to determine which protocol is used to establish the connection. By default,
            the <strong>socketStream</strong> protocol will be used.
            </remarks>
            <param name="hostName">
            A string which specifies the remote host to establish a connection with. This may
            specify a host name or an Internet address in dot-notation.
            </param>
            <param name="hostPort">
            An integer which specifies the port number for the connection. This value must be
            greater than zero and the maximum valid port number is 65535.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Connect">
            <summary>Establish a connection with a remote host.</summary>
            <returns>
            A boolean value which specifies if the connection has been established. If the
            socket is in blocking mode, a return value of <strong>true</strong> indicates that the connection has
            completed and the application may send and receive data from the remote host. If the
            socket is in non-blocking mode, a return value of <strong>true</strong> indicates that the socket has
            been successfully created and the connection is in progress. When the connection has
            completed, the
            <see cref="E:SocketTools.SocketWrench.OnConnect">OnConnect</see>
            event will be fired. If this method returns <strong>false</strong>, the connection could not be
            established and the application should check the value of the
            <see cref="P:SocketTools.SocketWrench.LastError">LastError</see>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            	<para>This method establishes a connection using assigned property values.</para>
            	<para>The value of the <strong>HostName</strong> or <strong>HostAddress</strong>
                property will be used to determine the host name or address to connect to.</para>
            	<para>The value of the <strong>RemotePort</strong> property will be used to
                determine the port number to connect to.</para>
            	<para>The value of the <strong>Protocol</strong> property will specify which
                protocol is used to establish the connection.</para>
            	<para>The value of the <strong>Timeout</strong> property will be used to specify
                the timeout period.</para>
            	<para>The value of the <strong>Options</strong> property will be used to specify
                the default options for the connection.</para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.Disconnect">
            <summary><para>Terminate the connection with a remote host.</para></summary>
            <remarks>
            	<para>The <strong>Disconnect</strong> method terminates the connection with the
                remote host and closes the socket handle allocated by the class. Note that the
                socket is not immediately released when the connection is terminated and will enter
                a wait state for two minutes. After the time wait period has elapsed, the socket
                will be released by the operating system. This is a normal safety mechanism to
                handle any packets that may arrive after the connection has been closed.</para>
            	<para>To immediately terminate the connection and release the socket, use the
                <strong>Abort</strong> method.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Abort">Abort Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Initialize(System.String)">
            <summary>Initialize an instance of the SocketWrench class.</summary>
            <returns>A boolean value which specifies if the class was initialized successfully.</returns>
            <remarks>
            	<para>The Initialize method can be used to explicitly initialize an instance of the
                SocketWrench class, loading the networking library and allocating resources for the
                current thread. Typically an application would define the license key as a custom
                attribute, however this method can be used to initialize the class directly.</para>
            	<para>The runtime license key for your copy of SocketWrench can be generated using
                the License Manager utility that is included with the product. Note that if you
                have installed an evaluation license, you will not have a runtime license key and
                cannot redistribute any applications which use the SocketWrench class.</para>
            </remarks>
            <seealso cref="T:SocketTools.SocketWrench.RuntimeLicenseAttribute">RuntimeLicenseAttribute Class</seealso>
            <example>
                The following example shows how to use the Initialize method to initialize an
                instance of the class. This example assumes that the license key string has been
                defined in code. 
                <code lang="CS" title="[C#]">
            SocketTools.SocketWrench socket = new SocketTools.SocketWrench();
             
            if (socket.Initialize(strLicenseKey) == false)
            {
                MessageBox.Show(socket.LastErrorString, "Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
                </code>
            	<code lang="VB" title="[Visual Basic]">
            Dim Socket As New SocketTools.SocketWrench
             
            If Socket.Initialize(strLicenseKey) = False Then
                MsgBox(Socket.LastErrorString, vbIconExclamation)
                Exit Sub
            End If
                </code>
            </example>
            <seealso cref="M:SocketTools.SocketWrench.Uninitialize">Uninitialize Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Initialize">
            <summary>Initialize an instance of the SocketWrench class.</summary>
            <returns>A boolean value which specifies if the class was initialized successfully.</returns>
            <remarks>
            	<para>The Initialize method can be used to explicitly initialize an instance of the
                SocketWrench class, loading the networking library and allocating resources for the
                current thread. Typically it is not necessary to explicitly call this method
                because the instance of the class is initialized by the class constructor. However,
                if the <strong>Uninitialize</strong> method is called, the class must be
                re-initialized before any other methods are called.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Uninitialize">Uninitialize Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Listen(System.String,System.Int32,System.Int32)">
            <summary>
            Listen for incoming client connections, specifying the local network address,
            port number and connection backlog.
            </summary>
            <returns>
            A boolean value which specifies if the listening socket could be created
            successfully. A value of <strong>true</strong> indicates that a listening socket has
            been created. A value of <strong>false</strong> indicates that a listening socket could
            not be created using the specified address or port number and the application should
            check the value of the <strong>LastError</strong> property to determine the cause of
            the failure.
            </returns>
            <remarks>
            After the listening socket has been created, the application should then call the
            <strong>Accept</strong> method to wait for a client to establish a connection. If the
            <strong>Blocking</strong> property is set to <strong>false</strong>, then the <strong>OnAccept</strong>
            event will fire when a client attempts to establish a connection.
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.Blocking">Blocking Property</seealso>
            <seealso cref="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">Accept Method</seealso>
            <seealso cref="E:SocketTools.SocketWrench.OnAccept">OnAccept Event</seealso>
            <param name="localAddress">
            A string argument which specifies the IP address of the network adapter that the
            class should use when listening for connection requests. If this argument is not
            specified, the class will bind to any suitable adapter on the local system. An address
            of 0.0.0.0 specifies that it should listen for connections on any network adapter
            configured on the system.
            </param>
            <param name="localPort">
            An integer argument which specifies the port number to listen for connections on.
            The minimum port value is 1, the maximum port value is 65535.
            </param>
            <param name="backlog">
            	<para>An integer argument which specifies the maximum size of the queue used to
                manage pending connections to the service. If the argument is set to value which
                exceeds the maximum size for the underlying service provider, it will be silently
                adjusted to the nearest legal value.</para>
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Listen(System.String,System.Int32)">
            <summary>
            Listen for incoming client connections, specifying the local network address and
            port number.
            </summary>
            <remarks>
            After the listening socket has been created, the application should then call the
            <strong>Accept</strong> method to wait for a client to establish a connection. If the
            <strong>Blocking</strong> property is set to <strong>false</strong>, then the <strong>OnAccept</strong>
            event will fire when a client attempts to establish a connection.
            </remarks>
            <returns>
            A boolean value which specifies if the listening socket could be created
            successfully. A value of <strong>true</strong> indicates that a listening socket has
            been created. A value of <strong>false</strong> indicates that a listening socket could
            not be created using the specified address or port number and the application should
            check the value of the <strong>LastError</strong> property to determine the cause of
            the failure.
            </returns>
            <seealso cref="P:SocketTools.SocketWrench.Blocking">Blocking Property</seealso>
            <seealso cref="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">Accept Method</seealso>
            <seealso cref="E:SocketTools.SocketWrench.OnAccept">OnAccept Event</seealso>
            <param name="localAddress">
            A string argument which specifies the IP address of the network adapter that the
            class should use when listening for connection requests. If this argument is not
            specified, the class will bind to any suitable adapter on the local system. An address
            of 0.0.0.0 specifies that it should listen for connections on any network adapter
            configured on the system.
            </param>
            <param name="localPort">
            An integer argument which specifies the port number to listen for connections on.
            The minimum port value is 1, the maximum port value is 65535.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Listen(System.Int32)">
            <summary>Listen for incoming client connections, specifying the local port number.</summary>
            <remarks>
            	<para>The value of the <strong>LocalAddress</strong> property is used to specify
                the network address that will be used to listen for client connections. If the
                property has not been set, or is set to the address 0.0.0.0 then connections will
                be listened for on any valid network adapter configured on the system.</para>
            	<para>After the listening socket has been created, the application should then call
                the <strong>Accept</strong> method to wait for a client to establish a connection. If the
                <strong>Blocking</strong> property is set to <strong>false</strong>, then the
                <strong>OnAccept</strong> event will fire when a client attempts to establish a
                connection.</para>
            </remarks>
            <returns>
            A boolean value which specifies if the listening socket could be created
            successfully. A value of <strong>true</strong> indicates that a listening socket has
            been created. A value of <strong>false</strong> indicates that a listening socket could
            not be created using the specified address or port number and the application should
            check the value of the <strong>LastError</strong> property to determine the cause of
            the failure.
            </returns>
            <seealso cref="P:SocketTools.SocketWrench.Blocking">Blocking Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.LocalAddress">LocalAddress Property</seealso>
            <seealso cref="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">Accept Method</seealso>
            <seealso cref="E:SocketTools.SocketWrench.OnAccept">OnAccept Event</seealso>
            <param name="localPort">
            An integer argument which specifies the port number to listen for connections on.
            The minimum port value is 1, the maximum port value is 65535.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Listen">
            <summary>Listen for incoming client connections.</summary>
            <returns>
            A boolean value which specifies if the listening socket could be created
            successfully. A value of <strong>true</strong> indicates that a listening socket has
            been created. A value of <strong>false</strong> indicates that a listening socket could
            not be created using the specified address or port number and the application should
            check the value of the <strong>LastError</strong> property to determine the cause of
            the failure.
            </returns>
            <remarks>
            	<para>The value of the <strong>LocalAddress</strong> property is used to specify
                the network address that will be used to listen for client connections. If the
                property has not been set, or is set to the address 0.0.0.0 then connections will
                be listened for on any valid network adapter configured on the system.</para>
            	<para>The value of the <strong>LocalPort</strong> property is used to specify the
                port number to listen for connections on.</para>
            	<para>After the listening socket has been created, the application should then call
                the <strong>Accept</strong> method to wait for a client to establish a connection. If the
                <strong>Blocking</strong> property is set to <strong>false</strong>, then the
                <strong>OnAccept</strong> event will fire when a client attempts to establish a
                connection.</para>
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.Blocking">Blocking Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.LocalAddress">LocalAddress Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.LocalPort">LocalPort Property</seealso>
            <seealso cref="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">Accept Method</seealso>
            <seealso cref="E:SocketTools.SocketWrench.OnAccept">OnAccept Event</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Peek(System.Byte[],System.Int32)">
            <summary>
            	<para>Read data from the socket and store it in a byte array, but do not remove the
                data from the socket buffers.</para>
            </summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that there is no data available to be read. If
            an error occurs, a value of -1 is returned and the application should check the value
            of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Peek</strong> method returns data that is available to read from the
                socket, up to the number of bytes specified. The data returned by this method is
                not removed from the socket buffers. It must be consumed by a subsequent call to
                the <strong>Read</strong> method. The return value indicates the number of bytes
                that can be read in a single operation.
                However, it is important to note that it may not indicate the total amount of data
                available to be read from the socket at that time.</para>
            	<para>If no data is available to be read, the method will return a value of zero.
                Using this method in a loop to poll a non-blocking socket can cause the application
                to become non-responsive. To determine if there is data available to be read, use
                the <strong>IsReadable</strong> property.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to read.
            This value cannot be larger than the size of the buffer specified by the caller.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Peek(System.Byte[])">
            <summary>
            	<para>Read data from the socket and store it in a byte array, but do not remove the
                data from the socket buffers.</para>
            </summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that there is no data available to be read. If
            an error occurs, a value of -1 is returned and the application should check the value
            of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Peek</strong> method returns data that is available to read from the
                socket, up to the number of bytes specified. The data returned by this method is
                not removed from the socket buffers. It must be consumed by a subsequent call to
                the <strong>Read</strong> method. The return value indicates the number of bytes
                that can be read in a single operation.
                However, it is important to note that it may not indicate the total amount of data
                available to be read from the socket at that time.</para>
            	<para>If no data is available to be read, the method will return a value of zero.
                Using this method in a loop to poll a non-blocking socket can cause the application
                to become non-responsive. To determine if there is data available to be read, use
                the <strong>IsReadable</strong> property.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
        </member>
        <member name="M:SocketTools.SocketWrench.Peek(System.String@,System.Int32)">
            <summary>
            	<para>Read data from the socket and store it in a string, but do not remove the
                data from the socket buffers.</para>
            </summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that there is no data available to be read. If
            an error occurs, a value of -1 is returned and the application should check the value
            of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Peek</strong> method returns data that is available to read from the
                socket, up to the number of bytes specified. The data returned by this method is
                not removed from the socket buffers. It must be consumed by a subsequent call to
                the <strong>Read</strong> method. The return value indicates the number of bytes
                that can be read in a single operation.
                However, it is important to note that it may not indicate the total amount of data
                available to be read from the socket at that time.</para>
            	<para>If no data is available to be read, the method will return a value of zero.
                Using this method in a loop to poll a non-blocking socket can cause the application
                to become non-responsive. To determine if there is data available to be read, use
                the <strong>IsReadable</strong> property.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to
            read.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Peek(System.String@)">
            <remarks>
            	<para>The <strong>Peek</strong> method returns data that is available to read from the
                socket, up to a maximum of 8192 bytes. The data returned by this method is not
                removed from the socket buffers. It must be consumed by a subsequent call to the
                <strong>Read</strong> method. The return value indicates the number of bytes that
                can be read in a single operation.
                However, it is important to note that it may not indicate the total amount of data
                available to be read from the socket at that time.</para>
            	<para>If no data is available to be read, the method will return a value of zero.
                Using this method in a loop to poll a non-blocking socket can cause the application
                to become non-responsive. To determine if there is data available to be read, use
                the <strong>IsReadable</strong> property.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            </remarks>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that there is no data available to be read. If
            an error occurs, a value of -1 is returned and the application should check the value
            of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <summary>
            	<para>Read data from the socket and store it in a string, but do not remove the
                data from the socket buffers.</para>
            </summary>
            <param name="buffer">A string that will contain the data read from the socket.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.Peek">
            <remarks>
            	<para>The <strong>Peek</strong> method returns the number of bytes that can be read in a
                single operation. However, it is important
                to note that it may not indicate the total amount of data available to be read from
                the socket at that time.</para>
            	<para>If no data is available to be read, the method will return a value of zero.
                Using this method in a loop to poll a non-blocking socket can cause the application
                to become non-responsive. To determine if there is data available to be read, use
                the <strong>IsReadable</strong> property.</para>
            </remarks>
            <returns>
            An integer value which specifies the number of bytes available to be read from
            the socket. A return value of zero specifies that there is no data available to be
            read. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <summary><para>Return the number of bytes available to be read from the socket.</para></summary>
        </member>
        <member name="M:SocketTools.SocketWrench.Read(System.Byte[],System.Int32)">
            <summary><para>Read data from the socket and store it in a byte array.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            The <strong>Read</strong> method returns data that has been read from the socket, up to the
            number of bytes specified. If no data is available to be read, an error will be
            generated if the socket is in non-blocking mode. If the socket is in blocking mode, the
            program will stop until data is received from the server or the connection is
            closed.
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to read.
            This value cannot be larger than the size of the buffer specified by the caller.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Read(System.Byte[])">
            <summary><para>Read data from the socket and store it in a byte array.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            The <strong>Read</strong> method returns data that has been read from the socket, up to the
            size of the byte array passed to the method. If no data is available to be read, an
            error will be generated if the socket is in non-blocking mode. If the socket is in
            blocking mode, the program will stop until data is received from the server or the
            connection is closed.
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
        </member>
        <member name="M:SocketTools.SocketWrench.Read(System.String@,System.Int32)">
            <summary><para>Read data from the socket and store it in a string.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            	<para>The <strong>Read</strong> method returns data that has been read from the socket, up to
                the number of bytes specified. If no data is available to be read, an error will be
                generated if the socket is in non-blocking mode. If the socket is in blocking mode,
                the program will stop until data is received from the server or the connection is
                closed.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to
            read.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Read(System.String@)">
            <remarks>
            	<para>The <strong>Read</strong> method returns data that has been read from the socket, up to
                a maximum of 8192 bytes. If no data is available to be read, an error will be
                generated if the socket is in non-blocking mode. If the socket is in blocking mode,
                the program will stop until data is received from the server or the connection is
                closed.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            </remarks>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <summary><para>Read data from the socket and store it in a string.</para></summary>
            <param name="buffer">A string that will contain the data read from the socket.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadFrom(System.Byte[],System.Int32,System.String@,System.Int32@)">
            <summary><para>Read data from the socket and store it in a byte array.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            	<para>The <strong>ReadFrom</strong> method returns data that has been read from the socket,
                up to the number of bytes specified. If no data is available to be read, an error
                will be generated if the socket is in non-blocking mode. If the socket is in
                blocking mode, the program will stop until data is received from the server or the
                connection is closed.</para>
            	<para>This method is typically used when reading binary data from a datagram
                socket.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to read.
            This value cannot be larger than the size of the buffer specified by the caller.
            </param>
            <param name="hostAddress">
            A string passed by reference that will contain the remote host Internet address
            when the method returns. For stream sockets, this will be the same as the address used
            to establish the connection. For datagram sockets, this will specify the address of
            host that sent the datagram.
            </param>
            <param name="hostPort">
            An integer passed by reference that will contain the remote host port number when
            the method returns. For stream sockets, this will be the same as the port number used
            to establish the connection. For datagram sockets, this will specify the port number
            used by the host that sent the datagram.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadFrom(System.Byte[],System.String@,System.Int32@)">
            <summary><para>Read data from the socket and store it in a byte array.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            	<para>The <strong>ReadFrom</strong> method returns data that has been read from the socket,
                up to the number of bytes specified. If no data is available to be read, an error
                will be generated if the socket is in non-blocking mode. If the socket is in
                blocking mode, the program will stop until data is received from the server or the
                connection is closed.</para>
            	<para>This method is typically used when reading binary data from a datagram
                socket.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="hostAddress">
            A string passed by reference that will contain the remote host Internet address
            when the method returns. For stream sockets, this will be the same as the address used
            to establish the connection. For datagram sockets, this will specify the address of
            host that sent the datagram.
            </param>
            <param name="hostPort">
            An integer passed by reference that will contain the remote host port number when
            the method returns. For stream sockets, this will be the same as the port number used
            to establish the connection. For datagram sockets, this will specify the port number
            used by the host that sent the datagram.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadFrom(System.String@,System.Int32,System.String@,System.Int32@)">
            <summary><para>Read data from the socket and store it in a string.</para></summary>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <remarks>
            	<para>The <strong>ReadFrom</strong> method returns data that has been read from the socket,
                up to the number of bytes specified. If no data is available to be read, an error
                will be generated if the socket is in non-blocking mode. If the socket is in
                blocking mode, the program will stop until data is received from the server or the
                connection is closed.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            	<para>This method is typically used when reading text data from a datagram
                socket.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to
            read.
            </param>
            <param name="hostAddress">
            A string passed by reference that will contain the remote host Internet address
            when the method returns. For stream sockets, this will be the same as the address used
            to establish the connection. For datagram sockets, this will specify the address of
            host that sent the datagram.
            </param>
            <param name="hostPort">
            An integer passed by reference that will contain the remote host port number when
            the method returns. For stream sockets, this will be the same as the port number used
            to establish the connection. For datagram sockets, this will specify the port number
            used by the host that sent the datagram.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadFrom(System.String@,System.String@,System.Int32@)">
            <remarks>
            	<para>The <strong>ReadFrom</strong> method returns data that has been read from the socket,
                up to the maximum size of a datagram. If no data is available to be read, an error
                will be generated if the socket is in non-blocking mode. If the socket is in
                blocking mode, the program will stop until data is received from the server or the
                connection is closed.</para>
            	<para>This method should only be used if the remote host is sending data that
                consists of printable characters. Binary data should be read using the method that
                accepts a byte array as the buffer parameter.</para>
            	<para>This method is typically used when reading text data from a datagram
                socket.</para>
            </remarks>
            <returns>
            An integer value which specifies the number of bytes actually read from the
            socket. A return value of zero specifies that the remote host has closed the connection
            and there is no more data available to be read. If an error occurs, a value of -1 is
            returned and the application should check the value of the <strong>LastError</strong>
            property to determine the cause of the failure.
            </returns>
            <summary><para>Read data from the socket and store it in a string.</para></summary>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="hostAddress">
            A string passed by reference that will contain the remote host Internet address
            when the method returns. For stream sockets, this will be the same as the address used
            to establish the connection. For datagram sockets, this will specify the address of
            host that sent the datagram.
            </param>
            <param name="hostPort">
            An integer passed by reference that will contain the remote host port number when
            the method returns. For stream sockets, this will be the same as the port number used
            to establish the connection. For datagram sockets, this will specify the port number
            used by the host that sent the datagram.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadLine(System.String@,System.Int32)">
            <summary>
            Read up to a line of data from the socket and return it in a string
            buffer.
            </summary>
            <returns>
            This method returns a boolean value which specifies if a line of data has been
            read. A value of <strong>true</strong> indicates a line of data has been read. If an error occurs or
            there is no more data available to read, then the method will return <strong>false</strong>. It is
            possible for data to be returned in the string buffer even if the return value is
            <strong>false</strong>. Applications should check the length of the string after the method returns to
            determine if any data was copied into the buffer. For example, if a timeout occurs
            while the method is waiting for more data to arrive on the socket, it will return zero;
            however, data may have already been copied into the string buffer prior to the error
            condition. It is the responsibility of the application to process that data, regardless
            of the method return value.
            </returns>
            <remarks>
            	<para>The <strong>ReadLine</strong> method reads data from the socket up to the specified
                number of bytes or until an end-of-line character sequence is encountered. Unlike
                the <strong>Read</strong> method which reads arbitrary bytes of data, this method is
                specifically designed to return a single line of text data in a string variable.
                When an end-of-line character sequence is encountered, the method will stop and
                return the data up to that point; the string will not contain the carriage-return
                or linefeed characters.</para>
            	<para>There are some limitations when using the <strong>ReadLine</strong> method. The method
                should only be used to read text, never binary data. In particular, it will discard
                nulls, linefeed and carriage return control characters. This method will force the
                current thread to block until an end-of-line character sequence is processed, the read
                operation times out or the remote host closes its end of the socket connection. If
                the <strong>Blocking</strong> property is set to <strong>false</strong>, calling this method will
                automatically switch the socket into a blocking mode, read the data and then
                restore the socket to non-blocking mode. If another socket operation is attempted
                while <strong>ReadLine</strong> is blocked waiting for data from the remote host, an error
                will occur. It is recommended that this method only be used with blocking socket
                connections.</para>
            	<para>The <strong>Read</strong> and <strong>ReadLine</strong> methods can be intermixed, however be
                aware that the <strong>Read</strong> method will consume any data that has already been
                buffered by the <strong>ReadLine</strong> method and this may have unexpected results.</para>
            </remarks>
            <param name="buffer"><para>A string which will contain the data read from the socket.</para></param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to
            read.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadLine(System.String@)">
            <summary>
            Read up to a line of data from the socket and return it in a string
            buffer.
            </summary>
            <returns>
            This method returns a boolean value which specifies if a line of data has been
            read. A value of <strong>true</strong> indicates a line of data has been read. If an error occurs or
            there is no more data available to read, then the method will return <strong>false</strong>. It is
            possible for data to be returned in the string buffer even if the return value is
            <strong>false</strong>. Applications should check the length of the string after the method returns to
            determine if any data was copied into the buffer. For example, if a timeout occurs
            while the method is waiting for more data to arrive on the socket, it will return zero;
            however, data may have already been copied into the string buffer prior to the error
            condition. It is the responsibility of the application to process that data, regardless
            of the method return value.
            </returns>
            <remarks>
            	<para>The <strong>ReadLine</strong> method reads data from the socket up to 8192 bytes in
                length or until an end-of-line character sequence is encountered. Unlike the
                <strong>Read</strong> method which reads arbitrary bytes of data, this method is
                specifically designed to return a single line of text data in a string variable.
                When an end-of-line character sequence is encountered, the method will stop and
                return the data up to that point; the string will not contain the carriage-return
                or linefeed characters.</para>
            	<para>There are some limitations when using the <strong>ReadLine</strong> method. The method
                should only be used to read text, never binary data. In particular, it will discard
                nulls, linefeed and carriage return control characters. This method will force the
                current thread to block until an end-of-line character sequence is processed, the read
                operation times out or the remote host closes its end of the socket connection. If
                the <strong>Blocking</strong> property is set to <strong>false</strong>, calling this method will
                automatically switch the socket into a blocking mode, read the data and then
                restore the socket to non-blocking mode. If another socket operation is attempted
                while <strong>ReadLine</strong> is blocked waiting for data from the remote host, an error
                will occur. It is recommended that this method only be used with blocking socket
                connections.</para>
            	<para>The <strong>Read</strong> and <strong>ReadLine</strong> methods can be intermixed, however be
                aware that the <strong>Read</strong> method will consume any data that has already been
                buffered by the <strong>ReadLine</strong> method and this may have unexpected results.</para>
            </remarks>
            <param name="buffer"><para>A string which will contain the data read from the socket.</para></param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.Byte[],System.Int32@,System.Byte[],SocketTools.SocketWrench.SocketStream)">
            <summary>
            Read a data stream from the socket and store it in the specified byte
            array.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
            <param name="marker">
            An array of bytes which is used to designate the logical end of the data stream.
            When this byte sequence is encountered by the method, it will stop reading and return
            to the caller. The buffer will contain all of the data read from the socket up to and
            including the end-of-stream marker.
            </param>
            <param name="options">
                One of the <see cref="T:SocketTools.SocketWrench.SocketStream">SocketStream</see> enumeration
                values which specifies how the data is processed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
            Read a data stream from the socket and store it in the specified byte
            array.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
            <param name="marker">
            An array of bytes which is used to designate the logical end of the data stream.
            When this byte sequence is encountered by the method, it will stop reading and return
            to the caller. The buffer will contain all of the data read from the socket up to and
            including the end-of-stream marker.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.Byte[],System.Int32@)">
            <summary>
            Read a data stream from the socket and store it in the specified byte
            array.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer"><para>A byte array that the data will be stored in.</para></param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.String@,System.Int32@,System.String,System.Boolean)">
            <summary>
            Read a data stream from the socket and store it in the specified string.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
            <param name="marker">
            A string which is used to designate the logical end of the data stream. When this
            character sequence is encountered by the method, it will stop reading and return to the
            caller. The string buffer will contain all of the data read from the socket up to and
            including the end-of-stream marker.
            </param>
            <param name="convertText">
            A boolean flag which specifies if the data data stream is considered to be
            textual and should be modified so that end-of-line character sequences are converted to
            follow standard Windows conventions. This will ensure that all lines of text are
            terminated with a carriage-return and linefeed sequence. Because this option modifies
            the data stream, it should never be used with binary data. Using this option may result
            in the amount of data returned in the buffer to be larger than the source data. For
            example, if the source data only terminates a line of text with a single linefeed, this
            option will have the effect of inserting a carriage-return character before each
            linefeed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.String@,System.Int32@,System.Boolean)">
            <summary>
            Read a data stream from the socket and store it in the specified string.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
            <param name="convertText">
            A boolean flag which specifies if the data data stream is considered to be
            textual and should be modified so that end-of-line character sequences are converted to
            follow standard Windows conventions. This will ensure that all lines of text are
            terminated with a carriage-return and linefeed sequence. Because this option modifies
            the data stream, it should never be used with binary data. Using this option may result
            in the amount of data returned in the buffer to be larger than the source data. For
            example, if the source data only terminates a line of text with a single linefeed, this
            option will have the effect of inserting a carriage-return character before each
            linefeed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.String@,System.Int32@)">
            <summary>
            Read a data stream from the socket and store it in the specified string.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the value of the <i>length</i>
                parameter to determine if any data was copied into the buffer. For example, if a
                timeout occurs while the method is waiting for more data to arrive on the socket,
                it will return zero; however, data may have already been copied into the buffer
                prior to the error condition. It is the responsibility of the application to
                process that data, regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            of data to read. This value cannot be larger than the size of the buffer specified by
            the caller. When the method returns, this value will be updated with the actual number
            of bytes read from the socket.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.String@,System.Boolean)">
            <summary>
            Read a data stream from the socket and store it in the specified string.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the length of the string to determine
                if any data was copied into the buffer. For example, if a timeout occurs while the
                method is waiting for more data to arrive on the socket, it will return zero;
                however, data may have already been copied into the buffer prior to the error
                condition. It is the responsibility of the application to process that data,
                regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
            <param name="convertText">
            A boolean flag which specifies if the data data stream is considered to be
            textual and should be modified so that end-of-line character sequences are converted to
            follow standard Windows conventions. This will ensure that all lines of text are
            terminated with a carriage-return and linefeed sequence. Because this option modifies
            the data stream, it should never be used with binary data. Using this option may result
            in the amount of data returned in the buffer to be larger than the source data. For
            example, if the source data only terminates a line of text with a single linefeed, this
            option will have the effect of inserting a carriage-return character before each
            linefeed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.ReadStream(System.String@)">
            <summary>
            Read a data stream from the socket and store it in the specified string.
            </summary>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, read the data
                stream and then restore the socket to non-blocking mode when it has finished. If
                another socket operation is attempted while <strong>ReadStream</strong> is blocked waiting
                for data from the remote host, an error will occur. It is recommended that this
                method only be used with blocking (synchronous) socket connections; if the
                application needs to establish multiple simultaneous connections, it should create
                worker threads to manage each connection.</para>
            	<para>It is possible for data to be returned in the buffer even if the method
                returns <strong>false</strong>. Applications should also check the length of the string to determine
                if any data was copied into the buffer. For example, if a timeout occurs while the
                method is waiting for more data to arrive on the socket, it will return zero;
                however, data may have already been copied into the buffer prior to the error
                condition. It is the responsibility of the application to process that data,
                regardless of the method return value.</para>
            	<para>Because <strong>ReadStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that will contain the data read from the socket.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.Reject">
            <summary>Rejects a connection request from a remote host.</summary>
            <remarks>
            The <strong>Reject</strong> method rejects a pending client connection and the remote host
            will see this as the connection being aborted. If there are no pending client
            connections at the time, this method will immediately return with an error indicating
            that the operation would cause the thread to block.
            </remarks>
            <returns>
            This method returns a boolean value. If the method succeeds, the return value is
            <strong>true</strong>. If the method fails, the return value is <strong>false</strong>.
            To get extended error information, check the value of the <strong>LastError</strong> property.
            </returns>
        </member>
        <member name="M:SocketTools.SocketWrench.Reset">
            <summary>
            Reset the internal state of the object, resetting all properties to their default
            values.
            </summary>
            <remarks>
            The <strong>Reset</strong> method returns the object to its default state. If a socket has been
            allocated, it will be released and any active connections will be terminated. All
            properties will be reset to their default values.
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.Resolve(System.String,System.String@)">
            <summary>Resolves a host name to a host IP address.</summary>
            <returns>
            This method returns a boolean value. If the host name can be resolved, the return
            value is <strong>true</strong>. If the host name cannot be resolved, the return
            value is <strong>false</strong>. To get extended error information, check the
            value of the <strong>LastError</strong> property.
            </returns>
            <param name="hostName">A string which specifies the host name to be resolved.</param>
            <param name="hostAddress">A string which will contain the Internet address for the specified host.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.Shutdown(SocketTools.SocketWrench.ShutdownOptions)">
            <summary>Disable sending or receiving data on the socket.</summary>
            <remarks>
            	<para>In some asynchronous applications, it may be desirable for a client to inform
                the server that no further communication is wanted, while allowing the client to
                read any residual data that may reside in internal buffers on the client side.
                <strong>Shutdown</strong> accomplishes this because the socket handle is still valid after it
                has been called, although some or all communication with the remote host has
                ceased.</para>
            	<para>Note that most applications do not typically need to use this method. To
                close a socket connection gracefully, you should use the
                <strong>Disconnect</strong> method.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Disconnect">Disconnect Method</seealso>
            <returns>
            A boolean value which specifies if the operation completed successfully. A return
            value of <strong>false</strong> indicates an error has occurred. To get extended error information,
            check the value of the <strong>LastError</strong> property.
            </returns>
            <param name="options">
                One of the <see cref="T:SocketTools.SocketWrench.ShutdownOptions">ShutdownOptions</see>
                enumeration values which specifies the operation that will no longer be allowed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Shutdown">
            <summary>Disable sending data on the socket.</summary>
            <returns>
            A boolean value which specifies if the operation completed successfully. A return
            value of <strong>false</strong> indicates an error has occurred. To get extended error information,
            check the value of the <strong>LastError</strong> property.
            </returns>
            <remarks>
            	In some asynchronous applications, it may be desirable for a client to inform
                the server that no further communication is wanted, while allowing the client to
                read any residual data that may reside in internal buffers on the client side.
                <strong>Shutdown</strong> accomplishes this because the socket handle is still valid after it
                has been called, although some or all communication with the remote host has
                ceased.
            	Note that most applications do not typically need to use this method. To
                close a socket connection gracefully, you should use the
                <strong>Disconnect</strong> method.
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Disconnect">Disconnect Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.StoreStream(System.String,System.Int32@,System.Int32,SocketTools.SocketWrench.SocketStream)">
            <summary>Reads a data stream from the socket and stores it in the specified file.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, read the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>StoreStream</strong> is blocked waiting for data
                from the remote host, an error will occur. It is recommended that this method
                only be used with blocking (synchronous) socket connections; if the application
                needs to establish multiple simultaneous connections, it should create worker
                threads to manage each connection.</para>
            	<para>Because <strong>StoreStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="fileName">
            	<para>A string variable that specifies the name of the file that will contain the
                data read from the socket. If the file does not exist, it will be created. If the
                file does exist, the contents will be overwritten.</para>
            </param>
            <param name="length">
            An integer value which specifies the maximum amount of data to be read from the
            socket. When the method returns, this variable will be updated with the actual number
            of bytes read. Note that because this argument is passed by reference and modified by
            the method, you must provide a variable, not a numeric constant. If the value is
            initialized to zero, this method will read data from the socket until the remote host
            disconnects or an error occurs.
            </param>
            <param name="offset">
            A numeric value which specifies the byte offset into the file where the method
            will start storing data read from the socket. Note that all data after this offset will
            be truncated. If a value of zero is specified, the file will be completely overwritten
            if it already exists.
            </param>
            <param name="options">
                One of the <see cref="T:SocketTools.SocketWrench.SocketStream">SocketStream</see> enumeration
                values which specifies how the data is processed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.StoreStream(System.String,System.Int32@,System.Int32,System.Boolean)">
            <summary>Reads a data stream from the socket and stores it in the specified file.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, read the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>StoreStream</strong> is blocked waiting for data
                from the remote host, an error will occur. It is recommended that this method
                only be used with blocking (synchronous) socket connections; if the application
                needs to establish multiple simultaneous connections, it should create worker
                threads to manage each connection.</para>
            	<para>Because <strong>StoreStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="fileName">
            	<para>A string variable that specifies the name of the file that will contain the
                data read from the socket. If the file does not exist, it will be created. If the
                file does exist, the contents will be overwritten.</para>
            </param>
            <param name="length">
            An integer value which specifies the maximum amount of data to be read from the
            socket. When the method returns, this variable will be updated with the actual number
            of bytes read. Note that because this argument is passed by reference and modified by
            the method, you must provide a variable, not a numeric constant. If the value is
            initialized to zero, this method will read data from the socket until the remote host
            disconnects or an error occurs.
            </param>
            <param name="offset">
            A numeric value which specifies the byte offset into the file where the method
            will start storing data read from the socket. Note that all data after this offset will
            be truncated. If a value of zero is specified, the file will be completely overwritten
            if it already exists.
            </param>
            <param name="convertText">
            A boolean flag which specifies if the data data stream is considered to be
            textual and should be modified so that end-of-line character sequences are converted to
            follow standard Windows conventions. This will ensure that all lines of text are
            terminated with a carriage-return and linefeed sequence. Because this option modifies
            the data stream, it should never be used with binary data. Using this option may result
            in the amount of data stored in the file to be larger than the source data. For
            example, if the source data only terminates a line of text with a single linefeed, this
            option will have the effect of inserting a carriage-return character before each
            linefeed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.StoreStream(System.String,System.Int32@,System.Boolean)">
            <summary>Reads a data stream from the socket and stores it in the specified file.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, read the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>StoreStream</strong> is blocked waiting for data
                from the remote host, an error will occur. It is recommended that this method
                only be used with blocking (synchronous) socket connections; if the application
                needs to establish multiple simultaneous connections, it should create worker
                threads to manage each connection.</para>
            	<para>Because <strong>StoreStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="fileName">
            	<para>A string variable that specifies the name of the file that will contain the
                data read from the socket. If the file does not exist, it will be created. If the
                file does exist, the contents will be overwritten.</para>
            </param>
            <param name="length">
            An integer value which specifies the maximum amount of data to be read from the
            socket. When the method returns, this variable will be updated with the actual number
            of bytes read. Note that because this argument is passed by reference and modified by
            the method, you must provide a variable, not a numeric constant. If the value is
            initialized to zero, this method will read data from the socket until the remote host
            disconnects or an error occurs.
            </param>
            <param name="convertText">
            A boolean flag which specifies if the data data stream is considered to be
            textual and should be modified so that end-of-line character sequences are converted to
            follow standard Windows conventions. This will ensure that all lines of text are
            terminated with a carriage-return and linefeed sequence. Because this option modifies
            the data stream, it should never be used with binary data. Using this option may result
            in the amount of data stored in the file to be larger than the source data. For
            example, if the source data only terminates a line of text with a single linefeed, this
            option will have the effect of inserting a carriage-return character before each
            linefeed.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.StoreStream(System.String,System.Int32@)">
            <summary>Reads a data stream from the socket and stores it in the specified file.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, read the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>StoreStream</strong> is blocked waiting for data
                from the remote host, an error will occur. It is recommended that this method
                only be used with blocking (synchronous) socket connections; if the application
                needs to establish multiple simultaneous connections, it should create worker
                threads to manage each connection.</para>
            	<para>Because <strong>StoreStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="fileName">
            	<para>A string variable that specifies the name of the file that will contain the
                data read from the socket. If the file does not exist, it will be created. If the
                file does exist, the contents will be overwritten.</para>
            </param>
            <param name="length">
            An integer value which specifies the maximum amount of data to be read from the
            socket. When the method returns, this variable will be updated with the actual number
            of bytes read. Note that because this argument is passed by reference and modified by
            the method, you must provide a variable, not a numeric constant. If the value is
            initialized to zero, this method will read data from the socket until the remote host
            disconnects or an error occurs.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.StoreStream(System.String)">
            <summary>Reads a data stream from the socket and stores it in the specified file.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, read the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>StoreStream</strong> is blocked waiting for data
                from the remote host, an error will occur. It is recommended that this method
                only be used with blocking (synchronous) socket connections; if the application
                needs to establish multiple simultaneous connections, it should create worker
                threads to manage each connection.</para>
            	<para>Because <strong>StoreStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being read, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being read. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="fileName">
            	<para>A string variable that specifies the name of the file that will contain the
                data read from the socket. If the file does not exist, it will be created. If the
                file does exist, the contents will be overwritten.</para>
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Uninitialize">
            <summary>
            Uninitialize the class library and release any resources allocated for the
            current thread.
            </summary>
            <remarks>
            	<para>The <strong>Uninitialize</strong> method terminates any active connection, releases
                resources allocated for the current thread and unloads the networking library.
                After this method has been called, no further socket operations may be performed
                until the class instance has been re-initialized.</para>
            	<para>If the <strong>Initialize</strong> method is explicitly called by the
                application, it should be matched by a call to the <strong>Uninitialize</strong>
                method when that instance of the class is no longer needed.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Initialize(System.String)">Initialize Method</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.Write(System.Byte[],System.Int32)">
            <summary>Write one or more bytes of data to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Write</strong> method sends one or more bytes of data to the remote host.
                If there is enough room in the socket's internal send buffer to accommodate all of
                the data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            </remarks>
            <param name="buffer">A byte array that contains the data to be written to the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to write.
            This value cannot be larger than the size of the buffer specified by the caller.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Write(System.Byte[])">
            <summary>Write one or more bytes of data to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Write</strong> method sends one or more bytes of data to the remote host.
                If there is enough room in the socket's internal send buffer to accommodate all of
                the data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            </remarks>
            <param name="buffer">A byte array that contains the data to be written to the socket.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.Write(System.String,System.Int32)">
            <summary>Write a string of characters to the socket.</summary>
            <returns>
            An integer value which specifies the number of characters actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Write</strong> method sends a string of characters to the remote host. If
                there is enough room in the socket's internal send buffer to accommodate all of the
                data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            </remarks>
            <param name="buffer">A string which contains the data to be written to the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of characters to write. This
            value cannot be larger than the length of the string specified by the caller.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.Write(System.String)">
            <summary>Write a string of characters to the socket.</summary>
            <returns>
            An integer value which specifies the number of characters actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>Write</strong> method sends a string of characters to the remote host. If
                there is enough room in the socket's internal send buffer to accommodate all of the
                data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            </remarks>
            <param name="buffer">A string which contains the data to be written to the socket.</param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteLine(System.String,System.Int32@)">
            <summary>
            Send a line of text to the remote host, terminated by a carriage-return and
            linefeed.
            </summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>The <strong>WriteLine</strong> method should only be used to send text, never binary
                data. In particular, this method will discard any data that follows a null character and
                will append linefeed and carriage return control characters to the data stream.
                Calling this method will force the current thread to block until the complete line of
                text has been written, the write operation times out or the remote host aborts the
                connection. If this method is called with the <strong>Blocking</strong> property set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, send the data
                and then restore the socket to non-blocking mode. If another socket operation is
                attempted while the <strong>WriteLine</strong> method is blocked sending data to the remote
                host, an error will occur. It is recommended that this method only be used with
                blocking socket connections.</para>
            	<para>The <strong>Write</strong> and <strong>WriteLine</strong> methods can be safely
                intermixed.</para>
            </remarks>
            <param name="buffer">
            A string which contains the data that will be sent to the remote host. The data
            will always be terminated with a carriage-return and linefeed control character
            sequence. If the string is empty, then a only a carriage-return and linefeed are
            written to the socket. Note that if the string contains a null character, any data that
            follows the null character will be discarded.
            </param>
            <param name="length">
            An integer value which specifies the maximum number of characters to write. This
            value cannot be larger than the length of the string specified by the caller.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteLine(System.String)">
            <summary>
            Send a line of text to the remote host, terminated by a carriage-return and
            linefeed.
            </summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>The <strong>WriteLine</strong> method should only be used to send text, never binary
                data. In particular, this method will discard any data that follows a null character and
                will append linefeed and carriage return control characters to the data stream.
                Calling this method will force the current thread to block until the complete line of
                text has been written, the write operation times out or the remote host aborts the
                connection. If this method is called with the <strong>Blocking</strong> property set to
                <strong>false</strong>, it will automatically switch the socket into a blocking mode, send the data
                and then restore the socket to non-blocking mode. If another socket operation is
                attempted while the <strong>WriteLine</strong> method is blocked sending data to the remote
                host, an error will occur. It is recommended that this method only be used with
                blocking socket connections.</para>
            	<para>The <strong>Write</strong> and <strong>WriteLine</strong> methods can be safely
                intermixed.</para>
            </remarks>
            <param name="buffer">
            A string which contains the data that will be sent to the remote host. The data
            will always be terminated with a carriage-return and linefeed control character
            sequence. If the string is empty, then a only a carriage-return and linefeed are
            written to the socket. Note that if the string contains a null character, any data that
            follows the null character will be discarded.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteLine">
            <summary>
            Send an empty line of text to the remote host, terminated by a carriage-return
            and linefeed.
            </summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>The <strong>WriteLine</strong> method will send an empty line of text, terminated by a
                carriage-return and linefeed. Calling this method will force the application to
                block until the complete line of text has been written, the write operation times
                out or the remote host aborts the connection. If this method is called with the
                <strong>Blocking</strong> property set to <strong>false</strong>, it will automatically switch the socket into
                a blocking mode, send the data and then restore the socket to non-blocking mode. If
                another socket operation is attempted while the <strong>WriteLine</strong> method is blocked
                sending data to the remote host, an error will occur. It is recommended that this
                method only be used with blocking socket connections.</para>
            	<para>The <strong>Write</strong> and <strong>WriteLine</strong> methods can be safely
                intermixed.</para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteStream(System.Byte[],System.Int32@)">
            <summary>Write a stream of bytes to the socket.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>The <strong>WriteStream</strong> method enables an application to write an arbitrarily
                large stream of data from a byte array to the socket. Unlike the <strong>Write</strong>
                method, which may not write all of the data in a single call, the
                <strong>WriteStream</strong> method will only return when all of the data has been written or
                an error occurs.</para>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, write the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>WriteStream</strong> is blocked sending data to
                the remote host, an error will occur. It is recommended that this method only be
                used with blocking (synchronous) socket connections; if the application needs to
                establish multiple simultaneous connections, it should create worker threads to
                manage each connection.</para>
            	<para>It is possible that some data will have been written to the socket even if
                the method returns <strong>false</strong>. Applications should also check the value of the
                <i>length</i> argument to determine if any data was sent. For example, if a timeout
                occurs while the function is waiting to write more data, it will return zero;
                however, some data may have already been written to the socket prior to the error
                condition.</para>
            	<para>Because <strong>WriteStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being written, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being written. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A byte array that contains the data to be written to the socket.</param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of bytes
            to write. This value cannot be larger than the size of the buffer specified by the
            caller. When the method returns, this value will be updated with the actual number of
            bytes written to the socket.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteStream(System.String,System.Int32@)">
            <summary>Write a string of characters to the socket.</summary>
            <returns>
            	<para>A boolean value which specifies if the operation completed successfully. A
                return value of <strong>false</strong> indicates an error has occurred. To get extended error
                information, check the value of the <strong>LastError</strong> property.</para>
            </returns>
            <remarks>
            	<para>The <strong>WriteStream</strong> method enables an application to write an arbitrarily
                large stream of data from a string to the socket. Unlike the <strong>Write</strong> method,
                which may not write all of the data in a single call, the <strong>WriteStream</strong> method
                will only return when all of the data has been written or an error occurs.</para>
            	<para>This method will force the current thread to block until the operation
                completes. If this method is called with the <strong>Blocking</strong> property set to <strong>false</strong>,
                it will automatically switch the socket into a blocking mode, write the data stream
                and then restore the socket to non-blocking mode when it has finished. If another
                socket operation is attempted while <strong>WriteStream</strong> is blocked sending data to
                the remote host, an error will occur. It is recommended that this method only be
                used with blocking (synchronous) socket connections; if the application needs to
                establish multiple simultaneous connections, it should create worker threads to
                manage each connection.</para>
            	<para>It is possible that some data will have been written to the socket even if
                the method returns <strong>false</strong>. Applications should also check the value of the
                <i>length</i> argument to determine if any data was sent. For example, if a timeout
                occurs while the function is waiting to write more data, it will return zero;
                however, some data may have already been written to the socket prior to the error
                condition.</para>
            	<para>Because <strong>WriteStream</strong> can potentially cause the current thread to block for
                long periods of time as the data stream is being written, the control will
                periodically generate <strong>OnProgress</strong> events. An application can use this event
                to update the user interface as the data is being written. Note that an application
                should never perform a blocking operation inside the event handler.</para>
            </remarks>
            <param name="buffer">A string that contains the data to be written to the socket.</param>
            <param name="length">
            An integer value passed by reference which specifies the maximum number of
            characters to write. This value cannot be larger than the length of the string
            specified by the caller. When the method returns, this value will be updated with the
            actual number of bytes written to the socket.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteTo(System.Byte[],System.Int32,System.String,System.Int32)">
            <summary>Write one or more bytes of data to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>WriteTo</strong> method sends one or more bytes of data to the remote host.
                If there is enough room in the socket's internal send buffer to accommodate all of
                the data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            	<para>This method is typically used when writing binary data to a datagram
                socket.</para>
            </remarks>
            <param name="buffer">A byte array that contains the data to be written to the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of bytes of data to write.
            This value cannot be larger than the size of the buffer specified by the caller.
            </param>
            <param name="hostAddress">
            A string value which specifies the address of the remote host that the data will
            be sent to. For datagram sockets, this may be any valid Internet address. For stream
            sockets, this must be the same address that was used to establish the
            connection.
            </param>
            <param name="hostPort">
            An integer value which specifies the port number of the remote host that the data
            will be sent to. For datagram sockets, this may be any valid port number. For stream
            sockets, this must be the same port number that was used to establish the
            connection.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteTo(System.Byte[],System.String,System.Int32)">
            <summary>Write one or more bytes of data to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>WriteTo</strong> method sends one or more bytes of data to the remote host.
                If there is enough room in the socket's internal send buffer to accommodate all of
                the data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            	<para>This method is typically used when writing binary data to a datagram
                socket.</para>
            </remarks>
            <param name="buffer">A byte array that contains the data to be written to the socket.</param>
            <param name="hostAddress">
            A string value which specifies the address of the remote host that the data will
            be sent to. For datagram sockets, this may be any valid Internet address. For stream
            sockets, this must be the same address that was used to establish the
            connection.
            </param>
            <param name="hostPort">
            An integer value which specifies the port number of the remote host that the data
            will be sent to. For datagram sockets, this may be any valid port number. For stream
            sockets, this must be the same port number that was used to establish the
            connection.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteTo(System.String,System.Int32,System.String,System.Int32)">
            <summary>Write a string of characters to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>WriteTo</strong> method sends a string of characters to the remote host. If
                there is enough room in the socket's internal send buffer to accommodate all of the
                data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            	<para>This method is typically used when writing text data to a datagram
                socket.</para>
            </remarks>
            <param name="buffer">A string that contains the data to be written to the socket.</param>
            <param name="length">
            An integer value which specifies the maximum number of characters to write. This
            value cannot be larger than the length of the string specified by the caller.
            </param>
            <param name="hostAddress">
            A string value which specifies the address of the remote host that the data will
            be sent to. For datagram sockets, this may be any valid Internet address. For stream
            sockets, this must be the same address that was used to establish the
            connection.
            </param>
            <param name="hostPort">
            An integer value which specifies the port number of the remote host that the data
            will be sent to. For datagram sockets, this may be any valid port number. For stream
            sockets, this must be the same port number that was used to establish the
            connection.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrench.WriteTo(System.String,System.String,System.Int32)">
            <summary>Write a string of characters to the socket.</summary>
            <returns>
            An integer value which specifies the number of bytes actually written to the
            socket. If an error occurs, a value of -1 is returned and the application should check
            the value of the <strong>LastError</strong> property to determine the cause of the
            failure.
            </returns>
            <remarks>
            	<para>The <strong>WriteTo</strong> method sends a string of characters to the remote host. If
                there is enough room in the socket's internal send buffer to accommodate all of the
                data, it is copied to the send buffer and control immediately returns to the
                caller. If amount of data exceeds the available buffer space and the socket is in
                blocking mode, then the method will block until the data can be sent. If the socket
                is in non-blocking mode and the send buffer is full, an error will occur.</para>
            	<para>This method is typically used when writing text data to a datagram
                socket.</para>
            </remarks>
            <param name="buffer">A string that contains the data to be written to the socket.</param>
            <param name="hostAddress">
            A string value which specifies the address of the remote host that the data will
            be sent to. For datagram sockets, this may be any valid Internet address. For stream
            sockets, this must be the same address that was used to establish the
            connection.
            </param>
            <param name="hostPort">
            An integer value which specifies the port number of the remote host that the data
            will be sent to. For datagram sockets, this may be any valid port number. For stream
            sockets, this must be the same port number that was used to establish the
            connection.
            </param>
        </member>
        <member name="P:SocketTools.SocketWrench.AdapterCount">
            <summary>Get the number of available local and remote network adapters.</summary>
            <remarks>
            	<para>The <strong>AdapterCount</strong> property returns the number of local and
                remote dial-up networking adapters available on the local system. This value can be
                used in conjunction with the <strong>AdapterAddress</strong> array to
                enumerate the IP addresses assigned to the various network adapters.</para>
            	<para>Note that it is possible that the <strong>AdapterCount</strong> property will return 0,
                and <strong>AdapterAddress</strong> will return an empty string. This indicates that the
                system does not have a physical network adapter with an assigned IP address, and
                there are no dial-up networking connections currently active. If a dial-up
                networking connection is established at some later point, the <strong>AdapterCount</strong>
                property will change to 1, and the <strong>AdapterAddress</strong> property will return the
                IP address allocated for that connection.</para>
            </remarks>
            <value>Returns the number of available local and remote network adapters.</value>
            <seealso cref="F:SocketTools.SocketWrench.AdapterAddress">AdapterAddress Field</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.AddressFamily">
            <summary>Gets and sets a value that determines which version of the Internet Protocol
            will be used.</summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.AddressType">AddressType</see> enumeration value which
                specifies which version of the Internet Protocol is used.
            </value>
            <remarks>
            	<para>Setting the <strong>AddressFamily</strong> property specifies which version
                of the Internet Protocol should be used when establishing a connection. You should
                only change the value of this property if you fully understand the implications of
                doing so. Not all Windows platforms support IPv6, and currently many systems have
                limited or no IPv6 connectivity.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.AtMark">
            <summary>Get a value that indicates if the next receive will return urgent data.</summary>
            <remarks>
            	<para>This property can only be used if the <strong>Protocol</strong> property is
                set to <strong>SocketProtocol.socketStream</strong> and the <strong>InLine</strong>
                property has been set to <strong>true</strong>.</para>
            </remarks>
            <value>
            Returns <strong>true</strong> if the next read on the socket will return urgent
            data.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.AutoResolve">
            <summary>
            Gets and sets a value that determines if host names and addresses are
            automatically resolved.
            </summary>
            <remarks>
            	<para>Setting the <strong>AutoResolve</strong> property determines if the class automatically
                resolves host names and addresses specified by the <strong>HostName</strong> and
                <strong>HostAddress</strong> properties. If set to <strong>true</strong>, setting the
                <strong>HostName</strong> property will cause the class to automatically determine the
                corresponding IP address and update the <strong>HostAddress</strong> property accordingly.
                Likewise, setting the <strong>HostAddress</strong> property will cause the class to determine
                the host name and update the <strong>HostName</strong> property. Setting this property to
                <strong>false</strong> prevents the class from resolving host names until a
                connection attempt is made.</para>
            	<para>It is important to note that setting the <strong>HostName</strong> or
                <strong>HostAddress</strong> property may cause the current thread to block, sometimes for
                several seconds, until the name or address is resolved. To prevent this behavior,
                set this property value to <strong>false</strong>.</para>
            </remarks>
            <value>
            Returns <strong>true</strong> if host names are automatically resolved to
            Internet addresses. The default value is <strong>false</strong>.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.Backlog">
            <summary>
            Gets and sets a value that indicates the number of connections that may be queued
            for a listening socket.
            </summary>
            <value>
            Returns an integer value that specifies the size of the backlog queue. The
            default value is 5.
            </value>
            <remarks>
            	<para>The <strong>Backlog</strong> property specifies the maximum size of the queue used to
                manage pending connections to the service. If the property is set to value which
                exceeds the maximum size for the underlying service provider, it will be silently
                adjusted to the nearest legal value. There is no standard way to determine what the
                maximum backlog value is.</para>
            	<para>This property must be set to the desired value before the <strong>Listen</strong>
                method is called, if the <strong>Listen</strong> method is used with default
                parameters.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Blocking">
            <summary>Gets and sets a value which indicates if the socket is in blocking mode.</summary>
            <remarks>
            	<para>Setting the <strong>Blocking</strong> property determines if socket operations complete
                synchronously or asynchronously. If set to <strong>true</strong>, then each socket
                operation (such as sending or receiving data) will return when the operation has
                completed or timed-out. If set to <strong>false</strong>, socket operations will
                return immediately. If the operation would result in the socket blocking (such as
                attempting to read data when no data has been sent by the remote host), an error is
                generated.</para>
            	<para>It is important to note that certain events, such as <strong>OnDisconnect,</strong>
            		<strong>OnRead</strong> and <strong>OnWrite</strong> are only fired if the socket is in non-blocking
                mode.</para>
            </remarks>
            <value>
            Returns <strong>true</strong> if the socket is in blocking mode; otherwise it
            returns <strong>false</strong>. The default value is <strong>true</strong>.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.Broadcast">
            <summary>
            Gets and sets a value which indicates if datagrams will be broadcast over the
            local network.
            </summary>
            <value>
            Returns <strong>true</strong> if datagrams will be broadcast; otherwise returns
            <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            If the <strong>Broadcast</strong> property is set to a value of <strong>true</strong>, the
            datagram written to the socket will be broadcast to all systems on the network. Use of
            this property is restricted to the UDP protocol and the value is ignored for TCP
            connections.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ByteOrder">
            <summary>
            Gets and sets a value which indicates how integer data is read and written to the
            socket.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SocketByteOrder">SocketByteOrder</see> enumeration value
                which specifies the byte order. The default is <strong>byteOrderNative</strong>.
            </value>
            <remarks>
            	<para>The <strong>ByteOrder</strong> property is used to specify how integer data is written
                to and read from the socket. The default value for this property is
                <strong>byteOrderNative</strong>, which specifies that integers should be written
                in the native byte order for the local machine. A value of
                <strong>byteOrderNetwork</strong> indicates that integers should be written in
                network byte order.</para>
            	<para>When applications write integer values on a socket (instead of string
                representations of those values), they should typically be converted to network
                byte order before they are sent. Likewise, when an integer value is read, it should
                then be converted from the network byte order back to the byte order used by the
                local machine. The native byte order, also called the host byte order, should only
                be used if it can be assured that both the sender and the receiver are running on
                an identical or compatible machine architectures (for example, if both systems are
                Intel-based).</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateExpires">
            <summary>Get a value that specifies the date that the security certificate expires.</summary>
            <value>A string which specifies a date using the local date and time format.</value>
            <remarks>
            The <strong>CertificateExpires</strong> property returns a string that specifies the date
            and time that the security certificate expires. This property will return an empty
            string if a secure connection has not been established with the remote host.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateIssued">
            <summary>
            Get a value that specifies the date that the security certificate was
            issued.
            </summary>
            <value>A string which specifies a date using the local date and time format.</value>
            <remarks>
            The <strong>CertificateIssued</strong> property returns a string that specifies the date
            and time that the security certificate was issued. This property will return an empty
            string if a secure connection has not been established with the remote host.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateIssuer">
            <summary>
            Get a value that provides information about the organization that issued the
            certificate.
            </summary>
            <value>A string that contains a comma separated list of name value pairs.</value>
            <remarks>
            	<para>The <strong>CertificateIssuer</strong> property returns a string that
                contains information about the organization that issued the server certificate. The
                string value is a comma separated list of tagged name and value pairs. In the
                nomenclature of the X.500 standard, each of these pairs are called a relative
                distinguished name (RDN), and when concatenated together, forms the issuer's
                distinguished name (DN). For example:</para>
            	<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            		<pre>
            C=US, O="RSA Data Security, Inc.", OU=Secure Server Certification Authority
            </pre>
            	</blockquote>
            	<para>To obtain a specific value, such as the name of the issuer or the issuer's
                country, the application must parse the string returned by this property. Some of
                the common tokens used in the distinguished name are:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Token</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>C</term>
            				<description>The ISO standard two character country code.</description>
            			</item>
            			<item>
            				<term>S</term>
            				<description>The name of the state or province.</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>The name of the city or locality.</description>
            			</item>
            			<item>
            				<term>O</term>
            				<description>The name of the company or organization.</description>
            			</item>
            			<item>
            				<term>OU</term>
            				<description>The name of the department or organizational
                            unit</description>
            			</item>
            			<item>
            				<term>CN</term>
            				<description>The common name; with X.509 certificates, this is the
                            domain name of the site the certificate was issued for.</description>
            			</item>
            		</list>
            	</para>
            	<para>This property will return an empty string if a secure connection has not been
                established with the remote host.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateName">
            <summary>Gets and sets a value that specifies the name of the security certificate.</summary>
            <remarks>
            	<para>The <strong>CertificateName</strong> property sets the common name or
                friendly name of the certificate that should be used when establishing a secure
                client connection or accepting a secure connection from a remote host. This
                property is used in conjunction with the <strong>CertificateStore</strong> property
                to identify the client or server certificate.</para>
            	<para>For client applications, it is only required that you set this property value
                if the server requires a client certificate for authentication. If this property is
                not set, a client certificate will not be provided to the server. The certificate
                must be designated as a client certificate and have a private key associated with
                it, otherwise the connection attempt will fail.</para>
            	<para>For server applications, it is required that you specify a certificate name
                if security has been enabled by setting the <strong>Secure</strong> property to
                true. The certificate must be designated as a server certificate and have a private
                key associated with it, otherwise incoming client connections cannot be
                accepted.</para>
            	<para>When the certificate store is searched for a matching certificate, it will
                first search for any certificate with a friendly name that matches the property
                value. If no valid certificate is found, it will then search for a certificate with
                a matching common name.</para>
            	<para>Certificates may be installed and viewed on the local system using the
                Certificate Manager that is included with the Windows operating system. For more
                information, refer to the documentation for the Microsoft Management
                Console.</para>
            </remarks>
            <value>A string which specifies the certificate name.</value>
            <seealso cref="P:SocketTools.SocketWrench.CertificateStore">CertificateStore Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.Secure">Secure Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificatePassword">
            <summary>Gets and sets the password associated with the security certificate.</summary>
            <value>A string which specifies the certificate password.</value>
            <remarks>
            This property sets the password that should be used to access a certificate in
            the specified certificate store. It is only required when the <b>CertificateStore</b>
            property specifies a file that contains a certificate and private key in PKCS12
            format.
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.CertificateStore">CertificateStore Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.Secure"/>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateStatus">
            <summary>
            Gets a value which indicates the status of the security certificate returned by
            the remote host.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SecurityCertificate">SecurityCertificate</see>
                enumeration value which specifies the status of the certificate.
            </value>
            <remarks>
            	<para>The <strong>CertificateStatus</strong> property is used to determine the
                status of the security certificate returned by the remote host when a secure
                connection has been established. This property value should be checked after
                the connection to the server has completed, but prior to beginning a transaction.</para>
            	<para>Note that if the certificate cannot be validated, the secure connection will
                not be automatically terminated. It is the responsibility of your application to
                determine the best course of action to take if the certificate is invalid. Even if
                the security certificate cannot be validated, the data exchanged with the remote
                host will still be encrypted.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateStore">
            <summary>
            Gets and sets a value that specifies the name of the local certificate
            store.
            </summary>
            <value>
            A string which specifies the certificate store name. The default value is the
            current user's personal certificate store.
            </value>
            <remarks>
            	<para>The <strong>CertificateStore</strong> property is used to specify the name of
                the certificate store which contains the security certificate to use when
                establishing a secure connection. The certificate may either be stored in the
                registry or in a file. If the certificate is stored in the registry, then this
                property should be set to one of the following predefined values:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Store Name</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>CA</term>
            				<description>Certification authority certificates. These are
                            certificates that are issued by entities which are entrusted to issue
                            certificates to other individuals or organizations. Companies such as
                            VeriSign and Thawte act as certification authorities.</description>
            			</item>
            			<item>
            				<term>MY</term>
            				<description>Personal certificates and their associated private keys
                            for the current user. This store typically holds the client
                            certificates used to establish a user's credentials. If a certificate
                            store is not specified, this is the default value that is
                            used.</description>
            			</item>
            			<item>
            				<term>ROOT</term>
            				<description>Certificates that have been self-signed by a certificate
                            authority. Root certificates for a number of different certification
                            authorities such as VeriSign and Thawte are installed as part of the
                            operating system and periodically updated by Microsoft.</description>
            			</item>
            		</list>
            	</para>
            	<para>In most cases the client certificate will be installed in the user's personal
                certificate store, and therefore it is not necessary to set this property value
                because that is the default location that will be used to search for the
                certificate. This property is only used if the <b>CertificateName</b> property is
                also set to a valid certificate name.</para>
            	<para>This property may also be used to specify a file that contains the client
                certificate. In this case, the property should specify the full path to the file
                and must contain both the certificate and private key in PKCS12 format. If the file
                is protected by a password, the <b>CertificatePassword</b> property must also be
                set to specify the password.</para>
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.CertificatePassword">CertificatePassword Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.Secure">Secure Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateSubject">
            <summary>
            Gets a value that provides information about the organization that the server
            certificate was issued to.
            </summary>
            <value>A string that contains a comma separated list of name value pairs.</value>
            <remarks>
            	<para>The <strong>CertificateSubject</strong> property returns a string that
                contains information about the organization that the server certificate was issued
                to. The string value is a comma separated list of tagged name and value pairs. In
                the nomenclature of the X.500 standard, each of these pairs are called a relative
                distinguished name (RDN), and when concatenated together, forms the issuer's
                distinguished name (DN). For example:</para>
            	<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            		<pre>
            C=US, O="RSA Data Security, Inc.", OU=Secure Server Certification Authority
            </pre>
            	</blockquote>
            	<para>To obtain a specific value, such as the name of the issuer or the issuer's
                country, the application must parse the string returned by this property. Some of
                the common tokens used in the distinguished name are:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Token</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>C</term>
            				<description>The ISO standard two character country code.</description>
            			</item>
            			<item>
            				<term>S</term>
            				<description>The name of the state or province.</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>The name of the city or locality.</description>
            			</item>
            			<item>
            				<term>O</term>
            				<description>The name of the company or organization.</description>
            			</item>
            			<item>
            				<term>OU</term>
            				<description>The name of the department or organizational
                            unit</description>
            			</item>
            			<item>
            				<term>CN</term>
            				<description>The common name; with X.509 certificates, this is the
                            domain name of the site the certificate was issued for.</description>
            			</item>
            		</list>
            	</para>
            	<para>This property will return an empty string if a secure connection has not been
                established with the remote host.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.CertificateUser">
            <summary>Gets and sets the user that owns the security certificate.</summary>
            <value>
            A string which specifies the owner of the certificate. This value defaults to the
            current user.
            </value>
            <remarks>
            This property sets the name of the user that owns the certificate that will be
            used to establish a secure connection. If this property is not set, the certificate
            store for the current user will be used when searching for the certificate. If this
            property is used to specify another user, the process must have the appropriate
            permission to access the registry location that contains the client certificate. On
            Windows Vista and later versions of the operating system, this requires that the
            process run with elevated privileges.
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.CertificateName">CertificateName Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.Secure">Secure Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.CipherStrength">
            <summary>
            Gets a value that indicates the length of the key used by the encryption
            algorithm for a secure connection.
            </summary>
            <value>
            An integer value which specifies the encryption key length if a secure connection
            has been established; otherwise a value of 0 is returned.
            </value>
            <remarks>
            The <strong>CipherStrength</strong> property returns the number of bits in the key used to
            encrypt the secure data stream. Common values returned by this property are 40, 56 and
            128. A key length of 40-bits is considered to be relatively insecure, while a key
            length of 56-bit is considered moderate and 128-bit keys are considered to be very
            secure. If this property returns a value of 0, this means that a secure connection has
            not been established with the remote host.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ExternalAddress">
            <summary>
            Gets a value that specifies the external Internet address for the local
            system.
            </summary>
            <remarks>
            	<para>The <strong>ExternalAddress</strong> property returns the IP address assigned to the
                router that connects the local host to the Internet. This is typically used by an
                application executing on a system in a local network that uses a router which
                performs Network Address Translation (NAT). In that network configuration, the
                <strong>LocalAddress</strong> property will only return the IP address for the local system
                on the LAN side of the network unless a connection has already been established to
                a remote host. The <strong>ExternalAddress</strong> property can be used to determine the IP
                address assigned to the router on the Internet side of the connection and can be
                particularly useful for servers running on a system behind a NAT router.</para>
            	<para>Using this property requires that you have an active connection to the
                Internet; checking the value of this property on a system that uses dial-up
                networking may cause the operating system to automatically connect to the Internet
                service provider. The control may be unable to determine the external IP address
                for the local host for a number of reasons, particularly if the system is behind a
                firewall or uses a proxy server that restricts access to external sites on the
                Internet. If the external address for the local host cannot be determined, the
                property will return an empty string.</para>
            	<para>If the control is able to obtain a valid external address for the local host,
                that address will be cached for sixty minutes. Because dial-up connections
                typically have different IP addresses assigned to them each time the system is
                connected to the Internet, it is recommended that this property only be used in
                conjunction with broadband connections using a NAT router.</para>
            	<para>It is important to note that checking this property value may cause the
                current thread to block until the external IP address can be resolved and should never
                be used in conjunction with non-blocking (asynchronous) socket connections. If you
                need to check this property value in an application which uses asynchronous
                sockets, it is recommended that you create a new thread and access the property
                from within that thread.</para>
            </remarks>
            <value>A string which specifies an Internet address using dotted notation.</value>
        </member>
        <member name="P:SocketTools.SocketWrench.Handle">
            <summary>
            Gets a value that specifies the socket handle allocated for the current
            session.
            </summary>
            <value>
            An integer which represents a socket handle. If there is no active connection, a
            value of -1 is returned.
            </value>
            <remarks>
            	<para>The <strong>Handle</strong> property specifies the socket descriptor of the
                listening socket. To accept the connection, a new instance of the SocketWrench
                class should be created, passing this value to the <strong>Accept</strong> method
                in the new class instance.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.HashStrength">
            <summary>
            Gets a value which specifies the length of the message digest that was selected
            for a secure connection.
            </summary>
            <value>
            An integer value which specifies the length of the message digest if a secure
            connection has been established; otherwise a value of 0 is returned.
            </value>
            <remarks>
            	<para>The <strong>HashStrength</strong> property returns the number of bits used in the
                message digest (hash) that was selected. Common values returned by this property
                are 128 and 160. If this property returns a value of 0, this means that a secure
                connection has not been established with the remote host.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.HostAddress">
            <summary>
            Gets and sets a value which specifies the Internet address used to establish a
            connection.
            </summary>
            <value>A string which specifies an Internet address using dotted notation.</value>
            <remarks>
            	<para>The <strong>HostAddress</strong> property can be used to set the Internet address for a
                remote system that you wish to communicate with. If the
                <strong>AutoResolve</strong> property is set to <strong>true</strong> and the
                address is assigned to a valid host name, the <strong>HostName</strong> property
                will be updated with that value.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.HostFile">
            <summary>
            Gets and sets a value that specifies the name of a host file used to resolve host
            names and addresses.
            </summary>
            <value>A string which specifies a file name.</value>
            <remarks>
            	<para>The <strong>HostFile</strong> property is used to specify the name of an
                alternate file for resolving hostnames and IP addresses. The host file is used as a
                database that maps an IP address to one or more hostnames, and is used when setting
                the <strong>HostName</strong> or <strong>HostAddress</strong> properties and
                establishing a connection with a remote host. The file is a plain text file, with
                each line in the file specifying a record, and each field separated by spaces or
                tabs. The format of the file must be as follows:</para>
            	<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            		<pre>
            ipaddress hostname [hostalias ...]
            </pre>
            	</blockquote>
            	<para>For example, one typical entry maps the name "localhost" to the local
                loopback IP address. This would be entered as:</para>
            	<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            		<pre>
            127.0.0.1 localhost
            </pre>
            	</blockquote>
            	<para>The hash character (#) may be used to specify a comment in the file, and all
                characters after it are ignored up to the end of the line. Blank lines are ignored,
                as are any lines which do not follow the required format.</para>
            	<para>Setting this property loads the file into memory allocated for the current
                thread. If the contents of the file have changed after the function has been
                called, those changes will not be reflected when resolving hostnames or addresses.
                To reload the host file from disk, set the property again with the same file name.
                To remove the alternate host file from memory, specify an empty string as the file
                name.</para>
            	<para>If a host file has been specified, it is processed before the default host
                file when resolving a hostname into an IP address, or an IP address into a
                hostname. If the host name or address is not found, or no host file has been
                specified, a nameserver lookup is performed.</para>
            	<para>Because the alternate host file is cached for the current thread, setting
                this property will affect all instances of the class in the same thread. For
                example, if a project has created three instances of the class, setting the
                HostFile property will affect all three instances, not just the instance that set
                the property. To determine if an alternate host file has been cached, check the
                property value. If the property returns an empty string, no alternate host file has
                been cached.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.HostName">
            <summary>
            Gets and sets a value which specifies the host name used to establish a
            connection.
            </summary>
            <value>A string which specifies a host name.</value>
            <remarks>
            	<para>The <strong>HostName</strong> property can be used to set the host name for a remote
                system that you wish to communicate with. If the <strong>AutoResolve</strong>
                property is set to <strong>true</strong> and the name can be resolved to a valid
                Internet address, the <strong>HostAddress</strong> property will be updated with
                that value.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.InLine">
            <summary>
            Gets and sets a value that indicates if urgent data is received in-line with
            non-urgent data.
            </summary>
            <remarks>
            	<para>The <strong>InLine</strong> property controls how urgent (out-of-band) data is handled
                when reading data from the socket. If set to a value of <strong>true</strong>,
                urgent data is placed in the data stream along with non-urgent data. To determine
                if the data that is being read is urgent, the <strong>AtMark</strong> property can be
                read.</para>
            </remarks>
            <value>
            Returns <strong>true</strong> if urgent data will be received in-line; otherwise
            returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.IsBlocked">
            <summary>
            Gets a value which indicates if the current thread is performing a blocking
            socket operation.
            </summary>
            <value>
            Returns <strong>true</strong> if the current thread is blocking, otherwise
            returns <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>IsBlocked</strong> property returns <strong>true</strong> if the
                current thread is blocked performing an operation. Because the Windows Sockets API
                only permits one blocking operation per thread of execution, this property should
                be checked before starting any blocking operation in response to an event.</para>
            	<para>If the <strong>IsBlocked</strong> property returns <strong>false</strong>,
                this means there are no blocking operations on the current thread at that time.
                However, this does not guarantee that the next socket operation will not fail. An
                application should always check the return value from a socket operation and check
                the value of the <strong>LastError</strong> property if an error occurs.</para>
            	<para>Note that this property will return <strong>true</strong> if there is any
                blocking operation being performed by the current thread, regardless of whether
                this specific instance of the class is responsible for the blocking operation or
                not.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.IsClosed">
            <summary>
            Gets a value which indicates if the connection to the remote host has been
            closed.
            </summary>
            <value>
            Returns <strong>true</strong> if the connection has been closed; otherwise
            returns <strong>false</strong>.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.IsConnected">
            <summary>
            Gets a value which indicates if a connection to the remote host has been
            established.
            </summary>
            <value>
            Returns <strong>true</strong> if the connection has been established; otherwise
            returns <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>IsConnected</strong> property can only be used to indicate if
                there is still a logical connection to the remote host. It cannot be used to detect
                abnormal conditions such as the remote host aborting the connection, the physical
                network connection being lost or other critical errors.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.IsInitialized">
            <summary>
            Gets a value which indicates if the current instance of the class has been
            initialized successfully.
            </summary>
            <value>
            Returns <strong>true</strong> if the class instance has been initialized;
            otherwise returns <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>IsInitialized</strong> property is used to determine if the
                current instance of the class has been initialized properly. Normally this is done
                automatically by the class constructor, however there are circumstances where the
                class may not be able to initialize itself.</para>
            	<para>The most common reasons that a class instance may not initialize correctly is
                that no runtime license key has been defined in the assembly or the license key
                provided is invalid. It may also indicate a problem with the system configuration
                or user access rights, such as not being able to load the required networking
                libraries or not being able to access the system registry.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.IsListening">
            <summary>
            Gets a value which indicates if the socket is listening for client
            connections.
            </summary>
            <value>
            Returns <strong>true</strong> if the socket is listening for client connections;
            otherwise returns <strong>false</strong>.
            </value>
            <remarks>
            The <strong>IsListening</strong> property will return <strong>true</strong> if
            the socket was created using the <strong>Listen</strong> method and it is currently
            accepting incoming client connections. In all other situations, this property will
            return <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.IsReadable">
            <summary>
            Gets a value which indicates if there is data available to be read from the
            socket.
            </summary>
            <value>
            Returns <strong>true</strong> if there is data available to be read; otherwise
            returns <strong>false</strong>.
            </value>
            <remarks>
            The <strong>IsReadable</strong> property returns <strong>true</strong> if data can be read
            from the socket without blocking. For non-blocking sockets, this property can be
            checked before the application attempts to read the socket. Note that even if this
            property does return <strong>true</strong> indicating that there is data available to
            be read, applications should always check the return value from the
            <strong>Read</strong> method.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.IsWritable">
            <summary>
            Gets a value which indicates if data can be written to the socket without
            blocking.
            </summary>
            <value>
            Returns <strong>true</strong> if data can be written to the socket; otherwise
            returns <strong>false</strong>.
            </value>
            <remarks>
            The <strong>IsWritable</strong> property returns <strong>true</strong> if data can be
            written to the socket without blocking. For non-blocking sockets, this property can be
            checked before the application attempts to write data to the socket. Note that even if
            this property does return <strong>true</strong> indicating that data can be written to
            the socket, applications should always check the return value from the
            <strong>Write</strong> method.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.KeepAlive">
            <summary>
            Gets and sets a value which indicates if keep-alive packets are sent on a
            connected socket.
            </summary>
            <value>
            Returns <strong>true</strong> if keep-alive packets are sent when the connection
            is idle, otherwise returns <strong>false</strong>. The default value is
            <strong>false</strong>.
            </value>
            <remarks>
            	<para>Setting the <strong>KeepAlive</strong> property to a value of <strong>true</strong>
                specifies that special packets are to be sent to the remote system when no data is
                being exchanged to ensure the connection remains active. This property can only be
                set for sockets that were created with the <strong>Protocol</strong> property set to a value
                of <strong>SocketProtocol.protocolStream</strong>.</para>
            	<para>If this property is set to <strong>true</strong>, keep-alive packets will
                start being generated five seconds after the socket has become idle with no data
                being sent or received. Enabling this option can be used by applications to detect
                when a physical network connection has been lost. However, it is recommended that
                most applications query the remote host directly to determine if the connection is
                still active. This is typically accomplished by sending specific commands to the
                server to query its status, or checking the elapsed time since the last response
                from the server.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LastError">
            <summary>Gets and sets a value which specifies the last error that has occurred.</summary>
            <value>
                Returns an <see cref="T:SocketTools.SocketWrench.ErrorCode">ErrorCode</see> enumeration value
                which specifies the last error code.
            </value>
            <remarks>
            	<para>The <strong>LastError</strong> property returns the error code associated
                with the last error that occurred for the current instance of the class. It is
                important to note that this value only has meaning if the previous method indicates
                that an error has actually occurred.</para>
            	<para>It is possible to explicitly clear the last error code by assigning the
                property to the value <strong>ErrorCode.errorNone</strong>.</para>
            	<para>The error code value can be cast to an integer value for display purposes if
                required. For a description of the error that can be displayed using a message box
                or some other similar mechanism, get the value of the
                <strong>LastErrorString</strong> property.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LastErrorString">
            <summary>Gets a value which describes the last error that has occurred.</summary>
            <value>A string which describes the last error that has occurred.</value>
            <remarks>
            The <strong>LastErrorString</strong> property can be used to obtain a description
            of the last error that occurred for the current instance of the class. It is important
            to note that this value only has meaning if the previous method indicates that an error
            has actually occurred.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Linger">
            <summary>
            Gets and sets a value which specifies the number of seconds to wait for the socket
            to disconnect from the remote host.
            </summary>
            <value>
            An integer value which specifies a number of seconds. The default value is
            0.
            </value>
            <remarks>
            Setting the <strong>Linger</strong> property to a value greater than zero indicates that
            the <strong>Disconnect</strong> method should wait up to the specified number of seconds for any
            data on the socket to be written before it is closed. A value of zero indicates that
            the socket should be closed immediately (but gracefully, without data loss).
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LocalAddress">
            <summary>Gets and sets the local Internet address that the socket will be bound to.</summary>
            <value>A string which specifies an Internet address in dotted notation.</value>
            <remarks>
            	<para>The <strong>LocalAddress</strong> property is used to specify the local
                Internet address that the socket will be bound to when a connection is established
                with a remote host. By default this property is not assigned a value, which
                specifies that the socket should be bound to any appropriate network interface on
                the local system.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LocalName">
            <summary>Gets a value which specifies the host name for the local system.</summary>
            <value>A string which specifies the local host name.</value>
            <remarks>
            The <strong>LocalName</strong> property returns the fully-qualified host name
            assigned to the local system. If the system has not been configured with an Internet
            domain name, then this property will return the NetBIOS name assigned to the local
            system.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LocalPort">
            <summary>
            Gets and sets a value which specifies the local port number the socket will be
            bound to.
            </summary>
            <value>An integer value which specifies a port number. The default value is 0.</value>
            <remarks>
            	<para>The <strong>LocalPort</strong> property is used to specify the local port
                number that the socket will be bound to when a connection is established with a
                remote host. By default this property value is 0, which specifies that the socket
                should be bound to any appropriate port number that is available on the local
                system. After a connection has been established, this property will return the
                actual port number that was allocated for the socket.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.LocalService">
            <summary>
            Gets and sets a value which specifies the local service the socket will be bound
            to.
            </summary>
            <value>A string which specifies a well-known service name.</value>
            <remarks>
            	<para>The <strong>LocalService</strong> property is used to specify a local port
                number that the socket will be bound to when a connection is established with a
                remote host. By default this property is not assigned a value, which specifies that
                the socket should be bound to any appropriate port number that is available on the
                local system.</para>
            	<para>Changing the value of the <strong>LocalService</strong> property will cause
                the <strong>LocalPort</strong> property value to change to the port number that
                corresponds with that service name. Likewise, changing the value of the
                <strong>LocalPort</strong> property will cause the <strong>LocalService</strong>
                property to return the name of the service associated with that port number.</para>
            	<para>A well-known service is a service name that is defined in the services file
                on the local system. This file is typically found in the
                \windows\system32\drivers\etc folder.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.NoDelay">
            <summary>
            Gets and sets a value which specifies if the Nagle algorithm should be enabled or
            disabled.
            </summary>
            <value>
            Returns <strong>true</strong> if the Nagle algorithm has been disabled; otherwise
            it returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>NoDelay</strong> property is used to enable or disable the Nagle algorithm,
                which buffers unacknowledged data and insures that a full-size packet can be sent
                to the remote host. By default this property value is set to
                <strong>false</strong>, which enables the Nagle algorithm (in other words, the data
                being written may not actually be sent until it is optimal to do so). Setting this
                property to <strong>true</strong> disables the Nagle algorithm, maintaining the
                time delays between the data packets being sent.</para>
            	<para>This property should be set to <strong>true</strong> only if it is absolutely
                required and the implications of doing so are understood. Disabling the Nagle
                algorithm can have a significant negative impact on the performance of your
                application.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Options">
            <summary>Gets and sets a value which specifies one or more socket options.</summary>
            <value>
                Returns one or more <see cref="T:SocketTools.SocketWrench.SocketOptions">SocketOptions</see>
                enumeration flags which specify the options for the socket. The default value for
                this property is <strong>socketOptionNone</strong>.
            </value>
            <remarks>
            The <strong>Options</strong> property specifies one or more default socket
            options which are used when creating a socket using either the <strong>Accept</strong>
            or <strong>Connect</strong> methods.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.PeerAddress">
            <summary>Gets a value that specifies the Internet address of the remote host.</summary>
            <value>A string which specifies an Internet address in dotted notation.</value>
            <remarks>
            	<para>The <strong>PeerAddress</strong> property returns the Internet address of the remote
                system that the local host is connected to. If a datagram socket is being used,
                this property will return the address of the system which sent the last datagram
                that was read. If no connection has been established, this property will return an
                empty string.</para>
            	<para>If this property is accessed inside an <strong>OnAccept</strong> event handler, it will
                return the address of the client that is requesting the connection. The application
                may use this information to determine if it wishes to accept or reject the client
                connection. If the address is not available to the client at that time, this
                property will return the address 0.0.0.0.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.PeerName">
            <summary>Gets a value that specifies the name of the remote host.</summary>
            <value>A string which specifies the peer host name.</value>
            <remarks>
            	<para>The <strong>PeerName</strong> property returns the name of the remote system that the
                local host is connected to. If a datagram socket is being used, this property will
                return the name of the system which sent the last datagram that was read.</para>
            	<para>Accessing this property may cause the thread to block until the peer address
                can be resolved to a host name.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.PeerPort">
            <summary>Gets a value that specifies the port number used by the remote host.</summary>
            <value>An integer value which specifies the peer port number.</value>
            <remarks>
            The <strong>PeerName</strong> property returns the port number of the remote system that
            the local host is connected to. If a datagram socket is being used, this property will
            return the port number of the remote host which sent the last datagram that was
            read.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.PhysicalAddress">
            <remarks>
            	<para>The <strong>PhysicalAddress</strong> property returns the Media Access Control (MAC)
                address for an Ethernet or Token Ring network adapter installed and configured on
                the local system. Since it is guaranteed that every adapter is assigned a unique
                address throughout the world, this value can be safely used for identification
                purposes. It is possible that this property will return an empty string, which
                indicates that it could not find a network adapter.</para>
            	<para>If more than one physical network adapter is installed on the system, this
                property will return the MAC address of the first adapter that it finds.</para>
            </remarks>
            <summary>
            Gets a value which specifies the MAC address for the local system's network
            adapter.
            </summary>
            <value>A string which specifies the network adapter MAC address.</value>
        </member>
        <member name="P:SocketTools.SocketWrench.Protocol">
            <summary>Gets and sets a value which specifies the socket protocol.</summary>
            <value>
                Returns a <see cref="T:SocketTools.SocketWrench.SocketProtocol">SocketProtocol</see> enumeration
                value which specifies the socket protocol. The default value is
                <strong>socketStream</strong>.
            </value>
            <remarks>
            The <strong>Protocol</strong> property specifies the type of socket that will be created.
            This property may only be set before the <strong>Connect</strong> method is called;
            attempting to change this property value after a connection has been established will
            generate an error.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.RemotePort">
            <summary>Gets and sets a value which specifies the remote port number.</summary>
            <value>An integer value which specifies a port number.</value>
            <remarks>
            The <strong>RemotePort</strong> property is used to set the port number that will be used
            to establish a connection with a remote host. If the port number specifies a well-known
            port, the <strong>RemoteService</strong> property will be updated with that name.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.RemoteService">
            <summary>Gets and sets a value which specifies the remote service.</summary>
            <value>A string which specifies a well-known service name.</value>
            <remarks>
            	<para>The <strong>RemoteService</strong> property is used to specify the port that
                will be used when establishing a connection with a remote host. Changing the value
                of the <strong>RemoteService</strong> property will cause the
                <strong>RemotePort</strong> property value to change to the port number that
                corresponds with that service name. Likewise, changing the value of the
                <strong>RemotePort</strong> property will cause the <strong>RemoteService</strong>
                property to return the name of the service associated with that port number.</para>
            	<para>A well-known service is a service name that is defined in the services file
                on the local system. This file is typically found in the
                \windows\system32\drivers\etc folder.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ReservedPort">
            <summary>Gets and sets a value which indicates if a reserved port number was used.</summary>
            <value>
            Returns <strong>true</strong> if a reserved port number was used; otherwise
            returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>ReservedPort</strong> property determines if a reserved local port number
                is use when the socket is created (reserved port numbers are in the range of 513
                through 1023, inclusive). Some application protocols require that the client bind
                to a local port number in this range. By setting the <strong>LocalPort</strong> property to 0
                and the <strong>ReservedPort</strong> property to <strong>true</strong>, a reserved port
                number will be used when the socket is created. The default value for this property
                is <strong>false</strong>, which specifies that a standard port number with a value
                of 1024 or higher will be bound to the socket unless the <strong>LocalPort</strong> property
                is explicitly set to a non-zero value. Reserved ports should only be used by those
                applications that need them to implement a specific protocol.</para>
            	<para>It is possible that the error <strong>errorAddressInUse</strong> will be returned when
                attempting to connect using a reserved port number. The value of the
                <strong>LocalPort</strong> property will specify the reserved port number that could not be
                used.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ReuseAddress">
            <summary>Gets and sets a value which indicates if a socket address can be reused.</summary>
            <value>
            Returns <strong>true</strong> if an address can be reused; otherwise returns
            <strong>false</strong>. The default value is <strong>true</strong>.
            </value>
            <remarks>
            	<para>The <strong>ReuseAddress</strong> property determines if a socket can be
                bound to an address and port number that were recently used. If this property is
                <strong>true</strong>, then addresses can be reused as needed. If the property is
                <strong>false</strong>, then addresses cannot be reused and an error will be
                generated if the address was was recently used by another socket.</para>
            	<para>This property is typically used by server applications. By setting the
                property to <strong>true</strong>, a server can be stopped and immediately
                restarted using the same port number; otherwise, the server must wait approximately
                two minutes before the port can be reused.</para>
            	<para>If you wish to determine if a local port number is already in use by another
                application, set this property to <strong>false</strong> and attempt to create a
                socket using that port number. If another application is already using that port
                number, an error will be generated indicating that the address is in use and the
                socket could not be created.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Route">
            <summary>Gets and sets a value which indicates if packets should be routed.</summary>
            <value>
            Returns <strong>true</strong> if packets should be routed; otherwise returns
            <strong>false</strong>. The default value is <strong>true</strong>.
            </value>
            <remarks>
            The <strong>Route</strong> property determines if routing tables should be used
            when sending data. If the property is set to <strong>false</strong>, then packets will
            be sent directly to the network interface; if there is a router between the local and
            remote hosts, the data will be lost. It is not recommended that you change this
            property value unless it is required by your application and you fully understand the
            implications of doing so.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Secure">
            <summary>
            Gets and sets a value which specifies if a secure connection is
            established.
            </summary>
            <value>
            Returns <strong>true</strong> if a secure connection is established; otherwise
            returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>Secure</strong> property determines if a secure connection is established
                with the remote host. The default value for this property is
                <strong>false</strong>, which specifies that a standard connection to the server is
                used. To establish a secure connection, the application should set this property
                value to <strong>true</strong> prior to calling the <strong>Accept</strong> or
                <strong>Connect</strong> methods. Once the connection has been established, the client may
                exchange data with the server as with standard connections.</para>
            	<para>It is possible for an application to establish a non-secure connection, and
                then switch to a secure connection at some later point during the session.
                Initially set the <strong>Secure</strong> property to <strong>false</strong>, then connect to
                the server normally. Once the connection has been established, setting the
                <strong>Secure</strong> property to true will cause the application to negotiate a secure
                connection with the remote host. If the socket was created using the <strong>Accept</strong>
                method, the control will block and wait for the client to begin the negotiation. If
                the socket was created using the <strong>Connect</strong> method, it will immediately begin
                the negotiation with the server. Note that if a non-blocking (asynchronous) socket
                is being used, the application must wait to set the <strong>Secure</strong> property to
                <strong>true</strong> after the <strong>OnConnect</strong> event has fired.</para>
            	<para>Setting the <strong>Secure</strong> property to <strong>false</strong> during a
                connection will cause the control to send a shutdown message to the remote host.
                This may cause the remote host to terminate the connection, however it will not
                close the socket. It is recommended that applications do not set the <strong>Secure</strong>
                property to <strong>false</strong> after a secure connection has been established,
                and instead use the <strong>Disconnect</strong> method to close the connection.</para>
            	<para>It is strongly recommended that any application that sets this property
                <strong>true</strong> use error handling to trap an errors that may occur. If the
                control is unable to initialize the security libraries, or otherwise cannot create
                a secure session for the client, an error will be generated when this property
                value is set.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[Visual Basic]" description="The following example connects to a secure web server and retrieves the contents of a text file and stores it in a string variable.">
            Socket.ThrowError = True
             
            Try
                Socket.Secure = True
                Socket.Connect(strHostName, nHostPort, defTimeout)
             
                Socket.WriteLine("GET " + strFileName + " HTTP/1.0")
                Socket.WriteLine("Host: " + strHostName)
                Socket.WriteLine("Accept: text/*")
                Socket.WriteLine()
             
                Do
                    Socket.ReadLine(strBuffer)
                Loop Until strBuffer.Length = 0
             
                Socket.ReadStream(strBuffer, True)
             
            Catch ex As SocketTools.SocketWrenchException
                MsgBox(ex.Message)
            End Try
             
            Socket.Disconnect()
                </code>
            </example>
        </member>
        <member name="P:SocketTools.SocketWrench.SecureCipher">
            <summary>
            Gets a value that specifies the encryption algorithm used for a secure
            connection.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SecureCipherAlgorithm">SecureCipherAlgorithm</see>
                enumeration value which identifies the algorithm.
            </value>
            <remarks>
            The <strong>SecureCipher</strong> property returns a value which identifies the algorithm
            used to encrypt the data stream. If a secure connection has not been established, this
            property will return a value of <strong>cipherNone</strong>.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.SecureHash">
            <summary>
            Gets a value that specifies the message digest algorithm used for a secure
            connection.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SecureHashAlgorithm">SecureHashAlgorithm</see>
                enumeration value which identifies the algorithm.
            </value>
            <remarks>
            	<para>The <strong>SecureHash</strong> property returns a value which identifies the message
                digest (hash) algorithm that was selected when a secure connection was established.
                If a secure connection has not been established, this property will return a value
                of <strong>hashNone</strong>.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.SecureKeyExchange">
            <summary>
            Gets a value that specifies the key exchange algorithm used for a secure
            connection.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SecureKeyAlgorithm">SecureKeyAlgorithm</see> enumeration
                value which identifies the algorithm.
            </value>
            <remarks>
            	<para>The <strong>SecureKeyExchange</strong> property returns a value which identifies the
                key exchange algorithm that was selected when a secure connection was established.
                If a secure connection has not been established, this property will return a value
                of <strong>keyExchangeNone</strong>.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.SecureProtocol">
            <summary>
            Gets and sets a value which specifies the protocol used for a secure
            connection.
            </summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SecurityProtocols">SecurityProtocols</see> enumeration
                value which identifies the protocol to be used when establishing a secure
                connection.
            </value>
            <remarks>
            	<para>The <strong>SecureProtocol</strong> property can be used to specify the security
                protocol to be used when establishing a secure connection with a server or
                accepting a secure connection from a client. By default, the class will attempt to
                use either SSL v3 or TLS v1 to establish the connection, with the
                appropriate protocol automatically selected based on the capabilities of the remote
                host. It is recommended that you only change this property value if you fully
                understand the implications of doing so. Assigning a value to this property will
                override the default protocol and force the class to attempt to use only the
                protocol specified.</para>
            	<para>Multiple security protocols may be specified by combining them using a
                bitwise <strong>or</strong> operator. After a connection has been established, this
                property will identify the protocol that was selected. Attempting to set this
                property after a connection has been established will result in an exception being
                thrown. This property should only be set after setting the <strong>Secure</strong> property
                to <strong>true</strong> and before calling the <strong>Accept</strong> or <strong>Connect</strong>
                methods.</para>
            	<para>In some cases, a server may only accept a secure connection if the TLS v1
                protocol is specified. If the security protocol is not compatible with the server,
                then the connection will fail with an error indicating that the control is unable
                to establish a security context for the session. In this case, try assigning the
                property to <strong>protocolTLS1</strong> and attempt the connection again.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Status">
            <summary>Gets a value which specifies the current status of the socket.</summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.SocketStatus">SocketStatus</see> enumeration value which
                specifies the current socket status.
            </value>
            <remarks>
            The <strong>Status</strong> property returns the current status of the socket.
            This property should be checked on blocking sockets to determine if the socket is in
            use before taking some action.
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ThreadModel">
            <summary>
            Gets and sets a value which specifies the threading model for the class
            instance.
            </summary>
            <value>
                Returns one or more <see cref="T:SocketTools.SocketWrench.ThreadingModel">ThreadingModel</see>
                enumeration value which specifies the threading model for the client. The default
                value for this property is <strong>modelSingleThread</strong>.
            </value>
            <remarks>
            	<para>The <strong>ThreadModel</strong> property specifies the threading model that is used by
                the class instance when a connection is established. The default value for this
                property is <strong>modelSingleThread</strong>, which specifies that only the
                thread that established the connection should be permitted to invoke methods. It is
                important to note that this threading model does not limit the application to a
                single thread of execution. When a session is established using the
                <strong>Connect</strong> method, that session is attached to the thread that
                created it. From that point on, until the session is terminated, only the owner may
                invoke methods in that instance of the class. The ownership of the class instance
                may be transferred from one thread to another using the
                <strong>AttachThread</strong> method.</para>
            	<para>Setting this property to <strong>modelFreeThread</strong> disables certain
                internal safety checks that are performed by the class and may result in unexpected
                behavior unless you ensure that access to the class instance is synchronized across
                multiple threads. The application must ensure that no two threads will attempt to
                invoke a blocking method at the same time. In other words, if one thread invokes a
                method, the application must ensure that another thread will not attempt to invoke
                any other method at the same time using the same instance of the class.</para>
            	<para>Changing the value of this property will not affect an active client session.
                The threading model must be specified prior to invoking the
                <strong>Connect</strong> method.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.AttachThread">AttachThread Method</seealso>
            <seealso cref="T:SocketTools.SocketWrench.ThreadingModel">ThreadingModel Enumeration</seealso>
            <seealso cref="T:SocketTools.SocketWrench.ThreadModelAttribute">ThreadModel Attribute</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.ThrowError">
            <summary>
            Gets and sets a value which specifies if method calls should throw exceptions
            when an error occurs.
            </summary>
            <remarks>
            	<para>Error handling for when calling class methods can be done in either of two
                different styles, according to the value of this property.</para>
            	<para>If the <strong>ThrowError</strong> property is set to <strong>false</strong>, the
                application should check the return value of any method that is used, and report
                errors based upon the documented value of the return code. It is the responsibility
                of the application to interpret the error code, if it is desired to explain the
                error in addition to reporting it. This is the default behavior.</para>
            	<para>If the <strong>ThrowError</strong> property is set to <strong>true</strong>, then
                exceptions will be generated whenever a method call fails. The program must be
                written to catch these exceptions and take the appropriate action when an error
                occurs. Failure to handle an exception will cause the program to terminate
                abnormally.</para>
            	<para>Note that if an error occurs while a property is being read or modified, an
                exception will be raised regardless of the value of the <strong>ThrowError</strong>
                property.</para>
            </remarks>
            <value>
            Returns <strong>true</strong> if method calls will generate exceptions when an
            error occurs; otherwise returns <strong>false</strong>. The default value is
            <strong>false</strong>.
            </value>
        </member>
        <member name="P:SocketTools.SocketWrench.Timeout">
            <summary>Gets and sets a value which specifies a timeout period in seconds.</summary>
            <value>An integer value which specifies a timeout period in seconds.</value>
            <remarks>
            	<para>Setting the <strong>Timeout</strong> property specifies the number of seconds
                until a blocking socket operation fails and returns an error.</para>
            	<para>The timeout period is only used when the socket is in blocking mode. Although
                this property can be changed when the socket is in non-blocking mode, the value
                will be ignored until the socket is returned to blocking mode.</para>
            	<para>For most applications it is recommended the timeout period be set between 10
                and 20 seconds.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Trace">
            <summary>
            Gets and sets a value which indicates if network function logging is enabled.
            </summary>
            <value>
            Returns <strong>true</strong> if network function tracing is enabled; otherwise
            returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>Trace</strong> property is used to enable (or disable) the tracing of
                network function calls. When enabled, each function call is logged to a
                file, including the function parameters, return value and error code if applicable.
                This facility can be enabled and disabled at run time, and the trace log file can
                be specified by setting the <strong>TraceFile</strong> property. All function calls that are
                being logged are appended to the trace file, if it exists. If no trace file exists
                when tracing is enabled, the trace file is created.</para>
            	<para>The tracing facility is available in all of the SocketTools networking
                classes and is enabled or disabled for an entire process. This means that once
                trace logging is enabled for a given component, all of the function calls made by
                the process using any of the SocketTools classes will be logged. For example, if
                you have an application using both the File Transfer Protocol and Post Office
                Protocol classes, and you set the <strong>Trace</strong> property to <strong>true</strong>,
                function calls made by both classes will be logged. Additionally, enabling a trace
                is cumulative, and tracing is not stopped until it is disabled for all classes used
                by the process.</para>
            	<para>If trace logging is not enabled, there is no negative impact on performance
                or throughput. Once enabled, application performance can degrade, especially in
                those situations in which multiple processes are being traced or the logfile is
                fairly large. Since logfiles can grow very quickly, even with modest applications,
                it is recommended that you delete the file when it is no longer needed.</para>
            	<para>When redistributing your application, make sure that you include the
                <strong>SocketTools9.TraceLog.dll</strong> module with your installation. If this
                library is not present, then no trace output will be generated and the value of the
                <strong>Trace</strong> property will be ignored. Only those function calls made by
                the SocketTools networking classes will be logged. Calls made directly to the
                Windows Sockets API, or calls made by other classes, will not be logged.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.TraceFile">
            <summary>
            Gets and sets a value which specifies the name of the network function tracing
            logfile.
            </summary>
            <remarks>
            	<para>The <strong>TraceFile</strong> property is used to specify the name of the trace file
                that is created when network function tracing is enabled. If this property is set to
                an empty string (the default value), then a file named
                <strong>SocketTools.log</strong> is created in the system's temporary directory. If
                no temporary directory exists, then the file is created in the current working
                directory.</para>
            	<para>If the file exists, the trace output is appended to the file, otherwise the
                file is created. Since network function tracing is enabled per-process, the trace
                file is shared by all instances of the class being used. If multiple class
                instances have tracing enabled, the <strong>TraceFile</strong> property should be set to the
                same value for each instance. Since trace files can grow very quickly, even with
                modest applications, it is recommended that you delete the file when it is no
                longer needed.</para>
            	<para>The trace file has the following format:</para>
            	<blockquote>
            		<pre>
            MyApp INF: WSAAsyncSelect(46, 0xcc4, 0x7e9, 0x27) returned 0
            MyApp WRN: connect(46, 192.0.0.1:1234, 16) returned -1 [10035]
            MyApp ERR: accept(46, NULL, 0x0) returned -1 [10038]
            </pre>
            	</blockquote>
            	<para>The first column contains the name of the process that is being traced. The
                second column identifies if the trace record is reporting information, a warning,
                or an error. What follows is the name of the function being called, the arguments
                passed to the function and the function's return value. If a warning or error is
                reported, the error code is appended to the record (the value is placed inside
                brackets).</para>
            	<para>If parameters are passed as integer values, they are recorded in decimal. If
                the parameter or return value is a pointer (a memory address), it is recorded as a
                hexadecimal value preceded with "0x". A special type of pointer, called a null
                pointer, is recorded as NULL. Those functions which expect socket addresses are
                displayed in the following format:</para>
            	<blockquote>
            		<pre>
            aa.bb.cc.dd:nnnn
            </pre>
            	</blockquote>
            	<para>The first four numbers separated by periods represent the IP address, and the
                number following the colon represents the port number in host byte order. Note that
                in the second line of the above example, the control is attempting to connect to a
                system with the IP address 192.0.0.1 on port 1234.</para>
            	<para>Note that if the specified file cannot be created, or the user does not have
                permission to modify an existing file, the error is silently ignored and no trace
                output will be generated.</para>
            </remarks>
            <value>A string which specifies the name of the file.</value>
        </member>
        <member name="P:SocketTools.SocketWrench.TraceFlags">
            <summary>Gets and sets a value which specifies the network function tracing flags.</summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.TraceOptions">TraceOptions</see> enumeration which
                specifies the amount of detail written to the trace logfile.
            </value>
            <remarks>
            	<para>The <strong>TraceFlags</strong> property is used to specify the type of information
                written to the trace file when network function tracing is enabled.</para>
            	<para>Because network function tracing is enabled per-process, the trace flags are
                shared by all instances of the class being used. If multiple class instances have
                tracing enabled, the <strong>TraceFlags</strong> property should be set to the same value for
                each instance. Changing the trace flags for any one instance of the class will
                affect the logging performed for all SocketTools classes used by the
                application.</para>
            	<para>Warnings are generated when a non-fatal error is returned by a network
                function. For example, if data is being written and the error
                <strong>errorOperationWouldBlock</strong> occurs, a warning is generated because
                the application simply needs to attempt to write the data at a later time.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Urgent">
            <summary>
            Gets and sets a value which specifies if urgent data will be read or
            written.
            </summary>
            <value>
            Returns <strong>true</strong> if urgent data will be read or written; otherwise
            returns <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
            <remarks>
            	<para>The <strong>Urgent</strong> property affects how the <strong>Read</strong> and
                <strong>Write</strong> methods receive and transmit data to the remote host. If set to a
                value of <strong>true</strong>, urgent (out-of-band) data will be read or written.
                The property value will automatically be reset to a value of <strong>false</strong>
                after the data has been read or written.</para>
            	<para>It is important to note that all systems may support more than one byte of
                urgent data if the data is not being received in-line. Refer to the <strong>InLine</strong>
                property for additional information. This property should only be set to
                <strong>true</strong> if required by the application and the implications of doing
                so are understood.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.Version">
            <summary>
            Gets a value which returns the current version of the SocketWrench class
            library.
            </summary>
            <value>A string which specifies the version of the class library.</value>
            <remarks>
            The <strong>Version</strong> property returns a string which identifies the
            current version and build of the SocketWrench class library. This value can be used by
            an application for validation and debugging purposes.
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnAccept">
            <summary>
            Occurs when a remote host attempts to establish a connection with the local
            system.
            </summary>
            <remarks>
            	<para>The <strong>OnAccept</strong> event occurs when a remote host attempts to
                connect to the local system. A connection is not actually established until it has
                been accepted by the listening server. To accept the connection, the application
                must call the <strong>Accept</strong> method.</para>
            	<para>The <strong>PeerAddress</strong> or <strong>PeerName</strong> properties may be used to determine
                the Internet address and host name of the remote host that is establishing the
                connection. Note that this information may not be available until after the
                <strong>Accept</strong> method is called to accept the connection.</para>
            	<para>This event is only generated if the socket is in non-blocking mode.</para>
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnCancel">
            <summary>Occurs when a blocking socket operation is canceled.</summary>
            <remarks>
            	<para>The <strong>OnCancel</strong> event is generated when a blocking socket
                operation, such as sending or receiving data, is canceled with the
                <strong>Cancel</strong> method. To assist in determining which operation was
                canceled, check the value of the <strong>Status</strong> property.</para>
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnConnect">
            <summary>Occurs when a connection is established with the remote host.</summary>
            <remarks>
            	<para>The <strong>OnConnect</strong> event occurs when a connection is made with a remote
                host as a result of a <strong>Connect</strong> method call. When the <strong>Connect</strong>
                method is called and the <strong>Blocking</strong> property is set to
                <strong>false</strong>, a socket is created but the connection is not actually
                established until after this event occurs. Between the time connection process is
                started and this event fires, no operation may be performed on the socket other
                than calling the <strong>Disconnect</strong> method.</para>
            	<para>This event is only generated if the socket is in non-blocking mode.</para>
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnDisconnect">
            <summary>Occurs when the remote host disconnects from the local system.</summary>
            <remarks>
            	<para>The <strong>OnDisconnect</strong> event occurs when the remote host closes
                its socket, terminating its connection with the application. Because there may
                still be data in the socket receive buffers, you should continue to read data from
                the socket until the <strong>Read</strong> method returns a value of 0. Once all of
                the data has been read, you should call the <strong>Disconnect</strong> method to
                close the local socket and terminate the session.</para>
            	<para>This event is only generated if the socket is in non-blocking mode.</para>
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnError">
            <summary>Occurs when an socket operation fails.</summary>
            <remarks>The <strong>OnError</strong> event occurs when a socket operation fails.</remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnProgress">
            <remarks>
            	<para>The <strong>OnProgress</strong> event occurs as a data stream is being read or written
                to the socket. If large amounts of data are being read or written, this event can
                be used to update a progress bar or other user-interface component to provide the
                user with some visual feedback on the progress of the operation.</para>
            	<para>This event is only generated when the <strong>ReadStream</strong>,
                <strong>WriteStream</strong> or <strong>StoreStream</strong> methods are
                called.</para>
            </remarks>
            <summary>Occurs as a data stream is being read or written to the socket.</summary>
        </member>
        <member name="E:SocketTools.SocketWrench.OnRead">
            <summary>Occurs when data is available to be read from the socket.</summary>
            <remarks>
            	<para>The <strong>OnRead</strong> event occurs when data is available to be read
                from the socket. This event is level-triggered, which means that once this event
                fires, it will not occur again until some data has been read from the socket. This
                design prevents an application from being flooded with event notifications. It is
                recommended that your application read all of the available data from the socket
                and store it in a local buffer for processing. See the example below.</para>
            	<para>This event is only generated if the socket is in non-blocking mode.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[Visual Basic]" description="An example that demonstrates how to implement an event handler for the OnRead event.">
            Private Sub Socket_OnRead(ByVal sender As Object, ByVal e As System.EventArgs) Handles Socket.OnRead
                Dim strBuffer As String
                Dim nRead As Integer
             
                Do
                    ' Read up to m_nBufferSize bytes of data from the socket
                    nRead = Socket.Read(strBuffer, m_nBufferSize)
             
                    If nRead &gt; 0 Then
                        ' Append the data to an internal buffer for processing
                        m_dataBuffer = m_dataBuffer + strBuffer
                    End If
                Loop Until nRead &lt; 1
             
                ProcessData()
            End Sub
                </code>
            </example>
        </member>
        <member name="E:SocketTools.SocketWrench.OnTimeout">
            <summary>
            Occurs when a blocking operation fails to complete before the timeout period
            elapses.
            </summary>
            <remarks>
            	<para>The <strong>OnTimeout</strong> event occurs when a blocking operation, such
                as sending or receiving data on the socket, fails to complete before the specified
                timeout period elapses. The timeout period for a blocking operation can be adjusted
                by setting the <strong>Timeout</strong> property.</para>
            	<para>This event is only generated if the socket is in blocking mode.</para>
            </remarks>
        </member>
        <member name="E:SocketTools.SocketWrench.OnWrite">
            <summary>Occurs when data can be written to the socket.</summary>
            <remarks>
            	<para>The <strong>OnWrite</strong> event occurs when the application can write data
                to the socket. This event will typically occur when a connection is first
                established with the remote host, and after the <strong>Write</strong> method has
                failed because there was insufficient memory available in the socket send buffers.
                In the second case, when some of the buffered data has been successfully sent to
                the remote host and there is space available in the send buffers, this event is
                used to signal the application that it may attempt to send more data.</para>
            	<para>This event is only generated if the socket is in non-blocking mode.</para>
            </remarks>
        </member>
        <member name="T:SocketTools.SocketWrench.AddressType">
            <summary>Specifies the Internet Protocol (IP) versions that the SocketWrench class supports.</summary>
            <remarks>
            	<para>The SocketWrench class uses the <strong>AddressType</strong> enumeration to
                specify which version of the Internet Protocol will be used when a socket is
                created. The default protocol used by the class when establishing a connection is
                <strong>addressIpv4</strong>.</para>
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.AddressFamily">AddressFamily Property (SocketTools.SocketWrench)</seealso>
        </member>
        <member name="F:SocketTools.SocketWrench.AddressType.addressUnknown">
            <summary>
            The version of the Internet Protocol is not specified. When a connection is
            established, the most appropriate version of the protocol will be used
            with preference given to IPv4 connections whenever possible.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.AddressType.addressIpv4">
            <summary>
            Internet Protocol version 4 will be used when establishing connections.
            It is recommended that most applications use this version of the protocol.
            IPv4 addresses are 32 bits in length and are specified as four integer
            values separated by periods. An example of an IPv4 address is 192.168.0.121
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.AddressType.addressIpv6">
            <summary>
            Internet Protocol version 6 will be used when establishing connections. IPv6
            addresses are 128 bits in length are and specified as a series of hexadecimal values
            separated by colons. An example of an IPv6 address is fd7c:2f6a:4f4f:ba34::a32
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SocketProtocol">
            <summary>Specifies the protocols that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SocketProtocol</strong> enumeration to
            specify which network protocol will be used when a socket is created. The default
            protocol used by the class is <strong>socketStream</strong>.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketProtocol.socketStream">
            <summary>
            Transmission Control Protocol (TCP). This protocol should be used with stream sockets,
            where data is sent and received as an arbitrary stream of bytes.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketProtocol.socketDatagram">
            <summary>
            User Datagram Protocol (UDP). This protocol should be used with datagram sockets, where
            data is sent and received in discrete packets.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketProtocol.socketRaw">
            <summary>
            Raw sockets. This socket type is for special purpose applications which need
            access to the IP datagram.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SocketStatus">
            <summary>
            Specifies the status values that may be returned by the SocketWrench
            class.
            </summary>
            <remarks>
            The SocketWrench class uses the <strong>SocketStatus</strong> enumeration to
            identify the current status of the socket.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusUnused">
            <summary>
            A socket has not been created. Attempts to perform any network operations, such
            as sending or receiving data, will generate an error.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusIdle">
            <summary>
            A socket has been created, but is not currently in use. A blocking socket
            operation can be executed at this point.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusListen">
            <summary>The socket is listening for connections from remote hosts.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusConnect">
            <summary>
            The socket is in the process of establishing a connection with a remote
            host.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusAccept">
            <summary>
            The socket is in the process of accepting a connection from a remote
            client.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusRead">
            <summary>The socket is in the process of receiving data from a remote host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusWrite">
            <summary>The socket is in the process of sending data to a remote host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusFlush">
            <summary>
            The control buffers are in the process of being flushed. Any data in the socket
            receive buffers will be discarded.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStatus.statusDisconnect">
            <summary>
            The socket is being closed and subsequent attempts to access the socket will
            result in an error.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SocketOptions">
            <summary>Specifies the options that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SocketOptions</strong> enumeration to
            specify one or more options to be used when establishing a connection with a remote
            host. Multiple options may be specified if necessary.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionNone">
            <summary>No option specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionBroadcast">
            <summary>
            This option specifies that broadcasting should be enabled for datagrams. This
            option is invalid for stream sockets.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionDontRoute">
            <summary>
            This option specifies default routing should not be used. This option should not
            be specified unless absolutely necessary.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionKeepAlive">
            <summary>
            This option specifies that packets are to be sent to the remote system when no
            data is being exchanged to keep the connection active. This option is only valid for
            stream sockets.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionReuseAddress">
            <summary>
            This option specifies that the local address can be reused. This option is
            commonly used by server applications.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionNoDelay">
            <summary>
            This option disables the Nagle algorithm, which buffers unacknowledged data and
            insures that a full-size packet can be sent to the remote host.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionInLine">
            <summary>
            This option specifies that out-of-band data should be received inline with the
            standard data stream. This option is only valid for stream sockets.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionSecure">
            <summary>
            This option specifies that a secure, encrypted connection will be established
            with the remote host.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketOptions.optionFreeThread">
            <summary>
            This option specifies that class methods may be called from any thread, and
            not only the thread that established the connection. Using this option disables
            certain internal safety checks that are made by the class and may result
            in unexpected behavior unless you ensure that access to the class instance
            is synchronized across multiple threads.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SocketStream">
            <summary>Specifies the data stream options that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SocketStream</strong> enumeration to
            specify how data should be processed when read from a socket using either the
            <strong>ReadStream</strong> or <strong>StoreStream</strong> methods.
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.ReadStream(System.Byte[],System.Int32@,System.Byte[],SocketTools.SocketWrench.SocketStream)">ReadStream Method</seealso>
            <seealso cref="M:SocketTools.SocketWrench.StoreStream(System.String,System.Int32@,System.Int32,SocketTools.SocketWrench.SocketStream)">StoreStream Method</seealso>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStream.streamDefault">
            <summary>
            The data stream will be returned to the caller unmodified. This option should
            always be used with binary data or data being stored in a byte array. If no options are
            specified, this is the default option used by this method.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketStream.streamConvert">
            <summary>
            The data stream is considered to be textual and will be modified so that
            end-of-line character sequences are converted to follow standard Windows conventions.
            This will ensure that all lines of text are terminated with a carriage-return and
            linefeed sequence. Because this option modifies the data stream, it should never be
            used with binary data. Using this option may result in the amount of data returned in
            the buffer to be larger than the source data. For example, if the source data only
            terminates a line of text with a single linefeed, this option will have the effect of
            inserting a carriage-return character before each linefeed.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SocketByteOrder">
            <summary>
            Specifies the byte-order in which integer data may exchanged with a remote
            host.
            </summary>
            <remarks>
            	<para>The byte-order is used to specify how 16-bit (short) integer and 32-bit
                (long) integer data is written to and read from the socket.</para>
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketByteOrder.byteOrderNative">
            <summary>Integer data will be sent and received using the native byte order.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SocketByteOrder.byteOrderNetwork">
            <summary>Integer data will be sent and received using network byte order.</summary>
        </member>
        <member name="T:SocketTools.SocketWrench.ShutdownOptions">
            <summary>Specifies the shutdown options that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>ShutdownOptions</strong> enumeration to
            specify how reading and writing on the socket should be handled when the
            <strong>Shutdown</strong> method is called.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.ShutdownOptions.shutdownRead">
            <summary>
            Disable any further reading of data. The application will be able to continue to
            send data. The remote host will see this as the connection being closed.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ShutdownOptions.shutdownWrite">
            <summary>
            Disable any further sending of data. The application will be able to continue to
            read data until the remote host closes the connection.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ShutdownOptions.shutdownReadWrite">
            <summary>
            Disable any further reading or writing to the socket. The remote host will see
            this as the connection being closed.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SecurityProtocols">
            <summary>Specifies the security protocols that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SecurityProtocols</strong> enumeration to
            specify one or more security protocols to be used when establishing a connection with a
            remote host. Multiple protocols may be specified if necessary and the actual protocol
            used will be negotiated with the remote host. It is recommended that most applications
            use <strong>protocolDefault</strong> when creating a secure connection.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolNone">
            <summary>
            No security protocol will be used, a secure connection will not be
            established.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolSSL2">
            <summary>
            The SSL 2.0 protocol has been selected. Note that this protocol has been
            deprecated and is no longer widely used. It is not recommended that this
            protocol be used when establishing secure connections.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolSSL3">
            <summary>
            The SSL 3.0 protocol has been selected. Note that this protocol has been
            deprecated and is no longer widely used. It is not recommended that this
            protocol be used when establishing secure connections. In most cases, this
            protocol is only selected if TLS is not supported by the server.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolTLS10">
            <summary>
            The TLS 1.0 protocol has been selected. This version of the protocol is
            commonly used by older servers and is the only version of TLS supported
            on Windows platforms prior to Windows 7 and Windows Server 2008.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolTLS11">
            <summary>
            The TLS 1.1 protocol has been selected. This version of TLS is supported
            on Windows 7 and Windows Server 2008 R2 and later versions of the operating
            system.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolTLS12">
            <summary>
            The TLS 1.2 protocol has been selected. This is the latest version of the
            protocol and is supported on Windows 7 and Windows Server 2008 R2 and later
            versions of Windows. It is the default protocol version used when
            establishing a secure connection.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolSSL">
            <summary>
            Any version of the Secure Sockets Layer (SSL) protocol should be used. The actual
            protocol version used will be negotiated with the remote host.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolTLS">
            <summary>
            Any version of the the Transport Layer Security (TLS) protocol should be used.
            The actual protocol version used will be negotiated with the remote host, with
            with preference for TLS 1.2.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolTLS1">
            <summary>
            Version 1.0, 1.1 or 1.2 of the the Transport Layer Security (TLS) protocol
            should be used. The actual protocol version used will be negotiated with the
            remote host, with preference for TLS 1.2.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolDefault">
            <summary>
            The default selection of security protocols will be used when establishing a
            connection. The TLS 1.2, 1.1 and 1.0 protocols will be negotiated with
            the host, in that order of preference. This option will always request the
            latest version of the preferred security protocols and is the recommended value.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityProtocols.protocolUnknown">
            <summary>
            An unknown or unsupported security protocol has been specified. This value
            indicates an error condition.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SecureCipherAlgorithm">
            <summary>Specifies the encryption algorithms that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SecureCipherAlgorithm</strong>
            enumeration to identify which encryption algorithm was selected when a secure
            connection was established with the remote host.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherNone">
            <summary>
            No cipher has been selected. A secure connection has not been established with
            the remote host.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherRC2">
            <summary>
            The RC2 block cipher was selected. This is a variable key length cipher which
            supports keys between 40- and 128-bits in length, in 8-bit increments.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherRC4">
            <summary>
            The RC4 stream cipher was selected. This is a variable key length cipher which
            supports keys between 40- and 128-bits in length, in 8-bit increments.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherRC5">
            <summary>
            The RC5 block cipher was selected. This is a variable key length cipher which
            supports keys up to 2040 bits, in 8-bit increments.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherDES">
            <summary>
            The DES (Data Encryption Standard) block cipher was selected. This is a fixed key
            length cipher using 56-bit keys.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherDES3">
            <summary>
            The Triple DES block cipher was selected. This cipher encrypts the data three
            times using different keys, effectively using a 168-bit key length.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherDESX">
            <summary>
            A variant of the DES block cipher which XORs an extra 64-bits of the key before
            and after the plaintext has been encrypted, increasing the key size to 184 bits.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherAES">
            <summary>
            The Advanced Encryption Standard cipher (also known as the Rijndael cipher) is a
            fixed block size cipher which use a key size of 128, 192 or 256 bits. This cipher is
            supported on Windows XP SP3 and later versions of the operating system.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureCipherAlgorithm.cipherSkipjack">
            <summary>
            The Skipjack block cipher was selected. This is a fixed key length cipher, using
            80-bit keys.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SecureHashAlgorithm">
            <summary>Specifies the hash algorithms that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>SecureHashAlgorithm</strong> enumeration
            to identify the message digest (hash) algorithm that was selected when a secure
            connection was established with the remote host.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureHashAlgorithm.hashNone">
            <summary>
            No hash algorithm has been selected. This is not a secure connection with the
            server.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureHashAlgorithm.hashMD5">
            <summary>
            The MD5 algorithm was selected. This algorithm takes a message of arbitrary
            length and produces a 128-bit message digest.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureHashAlgorithm.hashSHA">
            <summary>
            The SHA algorithm was selected. This algorithm produces a 160-bit message
            digest.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SecureKeyAlgorithm">
            <summary>
            Specifies the key exchange algorithms that the SocketWrench class
            supports.
            </summary>
            <remarks>
            The SocketWrench class uses the <strong>SecureKeyAlgorithm</strong> enumeration
            to identify the key exchange algorithm that was selected when a secure connection was
            established with the remote host.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureKeyAlgorithm.keyExchangeNone">
            <summary>
            No key exchange algorithm has been selected. This is not a secure connection with
            the server.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureKeyAlgorithm.keyExchangeRSA">
            <summary>The RSA public key exchange algorithm has been selected.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureKeyAlgorithm.keyExchangeKEA">
            <summary>
            The KEA public key exchange algorithm has been selected. This is an improved
            version of the Diffie-Hellman public key algorithm.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureKeyAlgorithm.keyExchangeDH">
            <summary>The Diffie-Hellman public key exchange algorithm has been selected.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecureKeyAlgorithm.keyExchangeECDH">
            <summary>
            The Elliptic Curve Diffie-Hellman key exchange algorithm was selected. This is a
            variant of the Diffie-Hellman algorithm which uses elliptic curve cryptography. This
            key exchange algorithm is only supported on Windows XP SP3 and later versions of the
            operating system.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.SecurityCertificate">
            <summary>
            Specifies the security certificate status values that may be returned by the
            SocketWrench class.
            </summary>
            <remarks>
            The SocketWrench class uses the <strong>SecurityCertificate</strong> enumeration
            to identify the current status of the certificate that was provided by the remote host
            when a secure connection was established.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateNone">
            <summary>
            No certificate information is available. A secure connection was not established
            with the server.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateValid">
            <summary>The certificate is valid.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateNoMatch">
            <summary>
            The certificate is valid, however the domain name specified in the certificate
            does not match the domain name of the remote host. The application can examine the
            <strong>CertificateSubject</strong> property to determine the site the certificate was
            issued to.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateExpired">
            <summary>
            The certificate has expired and is no longer valid. The application can examine
            the <strong>CertificateExpires</strong> property to determine when the certificate
            expired.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateRevoked">
            <summary>
            The certificate has been revoked and is no longer valid. It is recommended that
            the application immediately terminate the connection if this status is returned.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateUntrusted">
            <summary>
            The certificate has not been issued by a trusted authority, or the certificate is
            not trusted on the local host. It is recommended that the application immediately
            terminate the connection if this status is returned.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.SecurityCertificate.certificateInvalid">
            <summary>
            The certificate is invalid. This typically indicates that the internal structure
            of the certificate is damaged. It is recommended that the application immediately
            terminate the connection if this status is returned.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.ThreadingModel">
            <summary>Specifies the threading model used by the class instance.</summary>
            <remarks>
            	<para>The threading model <strong>modelSingleThread</strong> does not limit the
                application to a single thread of execution. It specifies that only a single thread
                may invoke methods in a class instance. When a session is established using the
                <strong>Connect</strong> method, that session is attached to the thread that
                created it. From that point on, until the session is terminated, only the owner may
                invoke methods in that instance of the class. The ownership of the class instance
                may be transferred from one thread to another using the
                <strong>AttachThread</strong> method.</para>
            	<para>The threading model <strong>modelFreeThread</strong> disables certain
                internal safety checks that are performed by the class and may result in unexpected
                behavior unless you ensure that access to the class instance is synchronized across
                multiple threads. The application must ensure that no two threads will attempt to
                invoke a blocking method at the same time. In other words, if one thread invokes a
                method, the application must ensure that another thread will not attempt to invoke
                any other method at the same time using the same instance of the class.</para>
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.ThreadingModel.modelSingleThread">
            <summary>
            Methods in the class instance may only be invoked by a single thread. This
            threading model specifies that only the thread which established the connection should
            be permitted to invoke methods. This is the default threading model.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ThreadingModel.modelFreeThread">
            <summary>
            Methods in the class instance may be invoked by any thread. This threading model
            permits methods to be invoked across multiple threads without being explicitly attached
            to the object.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.TraceOptions">
            <summary>Specifies the logging options that the SocketWrench class supports.</summary>
            <remarks>
            The SocketWrench class uses the <strong>TraceOptions</strong> enumeration to
            specify what kind of debugging information is written to the trace logfile. These
            options are only meaningful when trace logging is enabled by setting the
            <strong>Trace</strong> property to <strong>true</strong>.
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceDefault">
            <summary>
            The default trace logging option. This is the same as specifying the
            <strong>traceInfo</strong> option.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceInfo">
            <summary>
            All network function calls are written to the trace file. This is the default
            value.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceError">
            <summary>
            Only those network function calls which fail are recorded in the trace
            file.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceWarning">
            <summary>
            Only those network function calls which fail, or return values which indicate a
            warning, are recorded in the trace file.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceHexDump">
            <summary>
            All network function calls are written to the trace file, plus all the data that
            is sent or received is displayed, in both ASCII and hexadecimal format.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.TraceOptions.traceProcess">
            <summary>
            All function calls in the current process are logged, rather than only those
            functions in the current thread. This option is useful for multithreaded
            applications that are using worker threads.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.ErrorCode">
            <summary>Specifies the error codes returned by the SocketWrench class.</summary>
            <remarks>
            	<para>The SocketWrench class uses the <strong>ErrorCode</strong> enumeration to
                specify what error has occurred when a method fails. The current error
                code may be determined by checking the value of the <strong>LastError</strong>
                property.</para>
            	<para>Note that the last error code is only meaningful if the previous
                operation has failed.</para>
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNone">
            <summary>No error.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNotHandleOwner">
            <summary>Handle not owned by the current thread.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileNotFound">
            <summary>The specified file or directory does not exist.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileNotCreated">
            <summary>The specified file could not be created.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOperationCanceled">
            <summary>The blocking operation has been canceled.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidFileType">
            <summary>The specified file is a block or character device, not a regular file.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidDevice">
            <summary>The specified file type is invalid or not a regular file.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorTooManyParameters">
            <summary>The maximum number of function parameters has been exceeded.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidFileName">
            <summary>The specified file name contains invalid characters or is too long.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidFileHandle">
            <summary>Invalid file handle passed to function.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileReadFailed">
            <summary>Unable to read data from the specified file.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileWriteFailed">
            <summary>Unable to write data to the specified file.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOutOfMemory">
            <summary>Out of memory.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorAccessDenied">
            <summary>Access denied.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidParameter">
            <summary>Invalid argument passed to function.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorClipboardUnavailable">
            <summary>The system clipboard is currently unavailable.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorClipboardEmpty">
            <summary>The system clipboard is empty or does not contain any text data.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileEmpty">
            <summary>The specified file does not contain any data.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorFileExists">
            <summary>The specified file already exists.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorEndOfFile">
            <summary>End of file.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorDeviceNotFound">
            <summary>The specified device could not be found.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorDirectoryNotFound">
            <summary>The specified directory could not be found.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidBuffer">
            <summary>Invalid memory address passed to function.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorBufferTooSmall">
            <summary>The specified buffer is not large enough to contain the data.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNoHandles">
            <summary>No more handles are available to this process.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOperationWouldBlock">
            <summary>The specified operation would block the current thread.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOperationInProgress">
            <summary>A blocking operation is currently in progress.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorAlreadyInProgress">
            <summary>The specified operation is already in progress.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidHandle">
            <summary>Invalid handle passed to function.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidAddress">
            <summary>Invalid network address specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidSize">
            <summary>Datagram is too large to fit in specified buffer.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidProtocol">
            <summary>Invalid network protocol specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorProtocolNotAvailable">
            <summary>The specified network protocol is not available.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorProtocolNotSupported">
            <summary>The specified protocol is not supported.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSocketNotSupported">
            <summary>The specified socket type is not supported.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidOption">
            <summary>The specified option is invalid.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorProtocolFamily">
            <summary>Specified protocol family is not supported.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorProtocolAddress">
            <summary>The specified address is invalid for this protocol family.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorAddressInUse">
            <summary>The specified address is in use by another process.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorAddressUnavailable">
            <summary>The specified address cannot be assigned.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNetworkUnavailable">
            <summary>The networking subsystem is unavailable.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNetworkUnreachable">
            <summary>The specified network is unreachable.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNetworkReset">
            <summary>Network dropped connection on remote reset.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorConnectionAborted">
            <summary>Connection was aborted due to timeout or other failure.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorConnectionReset">
            <summary>Connection was reset by remote network.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOutOfBuffers">
            <summary>No buffer space is available.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorAlreadyConnected">
            <summary>Connection already established with remote host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNotConnected">
            <summary>No connection established with remote host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorConnectionShutdown">
            <summary>Unable to send or receive data after connection shutdown.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOperationTimeout">
            <summary>The specified operation has timed out.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorConnectionRefused">
            <summary>The connection has been refused by the remote host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorHostUnavailable">
            <summary>The specified host is unavailable.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorHostUnreachable">
            <summary>Remote host is unreachable.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorTooManyProcesses">
            <summary>Too many processes are using the networking subsystem.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorTooManyThreads">
            <summary>Too many threads have been created by the current process.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorTooManySessions">
            <summary>Too many client sessions have been created by the current process.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInternalFailure">
            <summary>An unexpected internal error has occurred.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNetworkNotReady">
            <summary>Network subsystem is not ready for communication.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidVersion">
            <summary>This version of the operating system is not supported.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNetworkNotInitialized">
            <summary>The networking subsystem has not been initialized.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorRemoteShutdown">
            <summary>The remote host has initiated a graceful shutdown sequence.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidHostName">
            <summary>The specified hostname is invalid or could not be resolved.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorHostNameNotFound">
            <summary>The specified hostname could not be found.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorHostNameRefused">
            <summary>Unable to resolve hostname, request refused.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorHostNameNotResolved">
            <summary>Unable to resolve hostname, no address for specified host.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidLicense">
            <summary>The license for this product is invalid.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorProductNotLicensed">
            <summary>This product is not licensed to perform this operation.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorNotImplemented">
            <summary>This function has not been implemented on this platform.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorUnknownLocalhost">
            <summary>Unable to determine local host name.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidHostAddress">
            <summary>Invalid host address specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidServicePort">
            <summary>Invalid service port number specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidServiceName">
            <summary>Invalid or unknown service name specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorInvalidEventId">
            <summary>Invalid event identifier specified.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorOperationNotBlocking">
            <summary>No blocking operation in progress on this socket.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityNotInitialized">
            <summary>Unable to initialize security interface for this process.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityContext">
            <summary>Unable to establish security context for this session.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityCredentials">
            <summary>Unable to open certificate store or establish security credentials.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityCertificate">
            <summary>Unable to validate the certificate chain for this session.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityDecryption">
            <summary>Unable to decrypt data stream.</summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ErrorCode.errorSecurityEncryption">
            <summary>Unable to encrypt data stream.</summary>
        </member>
        <member name="T:SocketTools.SocketWrench.RuntimeLicenseAttribute">
            <summary>Attribute that defines the runtime license key for the class.</summary>
            <remarks>
            	<para>The RuntimeLicense attribute is used to define the runtime license key that
                will be used when an instance of the class is created. This attribute is defined
                in the assembly information module for the language, such as AssemblyInfo.cs when
                programming C#. The runtime license key must be defined if you wish to redistribute
                your application.</para>
            	<para>The runtime license key for your copy of SocketWrench can be generated using
                the License Manager utility that is included with the product. Note that if you
                have installed an evaluation license, you will not have a runtime license key and
                cannot redistribute any applications which use the SocketWrench class.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[Visual Basic]">
            &lt;Assembly: SocketTools.SocketWrench.RuntimeLicense("abcdefghijklmnop")&gt;
                </code>
            	<code lang="CS" title="[C#]">
            [assembly: SocketTools.SocketWrench.RuntimeLicense("abcdefghijklmnop")]
                </code>
            </example>
        </member>
        <member name="M:SocketTools.SocketWrench.RuntimeLicenseAttribute.#ctor(System.String)">
            <summary>
            Constructor for the RuntimeLicense attribute which defines the runtime license
            key.
            </summary>
            <remarks>
            	<para>The runtime license key for your copy of SocketWrench can be generated using
                the License Manager utility that is included with the product. Note that if you
                have installed an evaluation license, you will not have a runtime license key and
                cannot redistribute any applications which use the SocketWrench class.</para>
            </remarks>
            <param name="licenseKey">
            A string argument which specifies the runtime license key which will be used to
            initialize the class library.
            </param>
        </member>
        <member name="P:SocketTools.SocketWrench.RuntimeLicenseAttribute.LicenseKey">
            <summary>Returns the value of the runtime license key.</summary>
            <value>A string which contains the runtime license key.</value>
        </member>
        <member name="T:SocketTools.SocketWrench.ThreadModelAttribute">
            <summary>Attribute that defines the threading model for the class.</summary>
            <remarks>
            	<para>The ThreadModel attribute is used to define the threading model that is to be
                used when an instance of the class is created. This attribute is defined in the
                assembly information module for the language, such as AssemblyInfo.cs when
                programming C#.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[Visual Basic]">
            &lt;Assembly: SocketTools.SocketWrench.ThreadModel(SocketTools.SocketWrench.ThreadModelAttribute.Model.SingleThread)&gt;
                </code>
            	<code lang="CS" title="[C#]">
            [assembly: SocketTools.SocketWrench.ThreadModel(SocketTools.SocketWrench.ThreadModelAttribute.Model.SingleThread)]
                </code>
            </example>
            <seealso cref="P:SocketTools.SocketWrench.ThreadModelAttribute.ThreadModel">ThreadModel Property (SocketTools.SocketWrench)</seealso>
        </member>
        <member name="M:SocketTools.SocketWrench.ThreadModelAttribute.#ctor(SocketTools.SocketWrench.ThreadModelAttribute.Model)">
            <summary>
            Constructor for the ThreadModel attribute which defines the threading
            model.
            </summary>
            <remarks>
            	<para>The <strong>ThreadModel</strong> attribute specifies the threading model that is used
                by the class instance when a connection is established. The default threading model
                is single threaded, which specifies that only the thread that established the
                connection should be permitted to invoke methods.</para>
            	<para>It is important to note that the single threading model does not limit the
                application to a single thread of execution. When a session is established using
                the <strong>Connect</strong> method, that session is attached to the thread that
                created it. From that point on, until the session is terminated, only the owner may
                invoke methods in that instance of the class. The ownership of the class instance
                may be transferred from one thread to another using the
                <strong>AttachThread</strong> method.</para>
            	<para>Setting this attribute to a non-zero value disables certain internal safety
                checks that are performed by the class and may result in unexpected behavior unless
                you ensure that access to the class instance is synchronized across multiple
                threads. The application must ensure that no two threads will attempt to invoke a
                blocking method at the same time. In other words, if one thread invokes a method,
                the application must ensure that another thread will not attempt to invoke any
                other method at the same time using the same instance of the class.</para>
            	<para>Changing the value of this attribute will also change the default value for
                the <strong>ThreadModel</strong> property for all instances of the class.</para>
            </remarks>
            <param name="threadModel">
                A <see cref="T:SocketTools.SocketWrench.ThreadModelAttribute.Model">Model</see>
                enumeration value which specifies the threading model which will be used when
                creating an instance of the class. A value of zero specifies a single threaded
                model, while a non-zero value specifies a free threaded model.
            </param>
        </member>
        <member name="P:SocketTools.SocketWrench.ThreadModelAttribute.ThreadModel">
            <summary>Returns the threading model used by the class.</summary>
            <value>
                A <see cref="T:SocketTools.SocketWrench.ThreadModelAttribute.Model">Model</see>
                enumeration value which specifies the threading model which will be used when an
                instance of the class is created.
            </value>
        </member>
        <member name="T:SocketTools.SocketWrench.ThreadModelAttribute.Model">
            <summary>Specifies the threading model used by the class instance.</summary>
            <remarks>
            	<para>The threading model <strong>SingleThread</strong> does not limit the
                application to a single thread of execution. It specifies that only a single thread
                may invoke methods in a class instance. When a session is established using the
                <strong>Connect</strong> method, that session is attached to the thread that
                created it. From that point on, until the session is terminated, only the owner may
                invoke methods in that instance of the class. The ownership of the class instance
                may be transferred from one thread to another using the
                <strong>AttachThread</strong> method.</para>
            	<para>The threading model <strong>FreeThread</strong> disables certain internal
                safety checks that are performed by the class and may result in unexpected behavior
                unless you ensure that access to the class instance is synchronized across multiple
                threads. The application must ensure that no two threads will attempt to invoke a
                blocking method at the same time. In other words, if one thread invokes a method,
                the application must ensure that another thread will not attempt to invoke any
                other method at the same time using the same instance of the class.</para>
            </remarks>
        </member>
        <member name="F:SocketTools.SocketWrench.ThreadModelAttribute.Model.SingleThread">
            <summary>
            Methods in the class instance may only be invoked by a single thread. This
            threading model specifies that only the thread which established the connection should
            be permitted to invoke methods. This is the default threading model.
            </summary>
        </member>
        <member name="F:SocketTools.SocketWrench.ThreadModelAttribute.Model.FreeThread">
            <summary>
            Methods in the class instance may be invoked by any thread. This threading model
            permits methods to be invoked across multiple threads without being explicitly attached
            to the object.
            </summary>
        </member>
        <member name="T:SocketTools.SocketWrench.AdapterAddressArray">
            <summary>The class used to return the network adapters configured for the local host.</summary>
            <remarks>
            The <strong>AdapterAddressArray</strong> class returns the network adapters configured for
            the local host. A read-only instance of this class is created by the SocketWrench class
            constructor and accessed using the <strong>AdapterAddress</strong> array.
            </remarks>
            <seealso cref="F:SocketTools.SocketWrench.AdapterAddress">AdapterAddress Field</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.AdapterAddressArray.Item(System.Int32)">
            <summary>Returns the address for the specified network adapter.</summary>
            <value>A string which specifies an Internet address using dot notation.</value>
            <param name="index">An integer value which specifies the index into the array.</param>
        </member>
        <member name="P:SocketTools.SocketWrench.AdapterAddressArray.Count">
            <summary>Returns the maximum number of elements in the array.</summary>
            <value>An integer value.</value>
            <remarks>
            This property will return the number of network adapters that are
            configured for the local system.
            </remarks>
        </member>
        <member name="T:SocketTools.SocketWrench.HostAliasArray">
            <summary>The class used to return the aliases for a specified host name.</summary>
            <remarks>
            The <strong>HostAliasArray</strong> class returns the aliases for a specified
            host name. A read-only instance of this class is created by the SocketWrench class
            constructor and accessed using the <strong>HostAlias</strong> array.
            </remarks>
            <seealso cref="F:SocketTools.SocketWrench.HostAlias">HostAlias Field</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.HostAliasArray.Item(System.Int32)">
            <summary>Returns an alias for the specified host name.</summary>
            <value>A string which specifies an alias for the host name.</value>
            <param name="index">An integer value which specifies the index into the array.</param>
        </member>
        <member name="P:SocketTools.SocketWrench.HostAliasArray.Count">
            <summary>Returns the maximum number of elements in the array.</summary>
            <value>An integer value.</value>
            <remarks>
            This property will return the same value as the <strong>HostAliases</strong>
            property and is used to determine the maximum index value for the
            <strong>HostAlias</strong> array.
            </remarks>
        </member>
        <member name="T:SocketTools.SocketWrench.OnAcceptEventHandler">
            <summary>
                Represents the method that will handle the <see cref="E:SocketTools.SocketWrench.OnAccept">OnAccept</see>
                event.
            </summary>
            <remarks>
            	<para>When you create an <strong>OnAcceptEventHandler</strong> delegate, you
                identify the method that will handle the event. To associate the event with your
                event handler, add an instance of the delegate to the event. The event handler is
                called whenever the event occurs, until you remove the delegate.</para>
            	<para>Note that the declaration of your event handler must have the same parameters
                as the <strong>OnAcceptEventHandler</strong> delegate declaration.</para>
            </remarks>
            <seealso cref="M:SocketTools.SocketWrench.Accept(System.Int32,System.Int32,SocketTools.SocketWrench.SocketOptions)">Accept Method</seealso>
            <seealso cref="E:SocketTools.SocketWrench.OnAccept">OnAccept Event</seealso>
            <param name="sender">The source of the event.</param>
            <param name="e">
                An <see cref="T:SocketTools.SocketWrench.AcceptEventArgs">AcceptEventArgs</see> that contains the
                event data.
            </param>
        </member>
        <member name="T:SocketTools.SocketWrench.OnErrorEventHandler">
            <summary>Represents the method that will handle the <see cref="E:SocketTools.SocketWrench.OnError">OnError</see> event.</summary>
            <remarks>
            	<para>When you create an <strong>OnErrorEventHandler</strong> delegate, you
                identify the method that will handle the event. To associate the event with your
                event handler, add an instance of the delegate to the event. The event handler is
                called whenever the event occurs, until you remove the delegate.</para>
            	<para>Note that the declaration of your event handler must have the same parameters
                as the <strong>OnErrorEventHandler</strong> delegate declaration.</para>
            </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">
                An <see cref="T:SocketTools.SocketWrench.ErrorEventArgs">ErrorEventArgs</see> that contains the
                event data.
            </param>
        </member>
        <member name="T:SocketTools.SocketWrench.OnProgressEventHandler">
            <summary>
                Represents the method that will handle the <see cref="E:SocketTools.SocketWrench.OnProgress">OnProgress</see>
                event.
            </summary>
            <remarks>
            	<para>When you create an <strong>OnProgressEventHandler</strong> delegate, you
                identify the method that will handle the event. To associate the event with your
                event handler, add an instance of the delegate to the event. The event handler is
                called whenever the event occurs, until you remove the delegate.</para>
            	<para>Note that the declaration of your event handler must have the same parameters
                as the <strong>OnProgressEventHandler</strong> delegate declaration.</para>
            </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">
                A <see cref="T:SocketTools.SocketWrench.ProgressEventArgs">ProgressEventArgs</see> that contains
                the event data.
            </param>
        </member>
        <member name="T:SocketTools.SocketWrench.AcceptEventArgs">
            <summary>Provides data for the OnAccept event.</summary>
            <remarks>
            	<para><strong>AcceptEventArgs</strong> specifies the socket handle for the server
                that should accept the incoming client connection.</para>
            	<para>
                    The <see cref="E:SocketTools.SocketWrench.OnAccept">OnAccept</see> event occurs when a remote host
                    attempts to establish a connection with the local system.
                </para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.AcceptEventArgs.Handle">
            <summary>Gets a value that specifies the socket handle for the listening server.</summary>
            <value>An integer value which specifies the server socket handle.</value>
        </member>
        <member name="T:SocketTools.SocketWrench.ErrorEventArgs">
            <summary>Provides data for the OnError event.</summary>
            <remarks>
            	<para><strong>ErrorEventArgs</strong> specifies the numeric error code and a
                description of the error that has occurred.</para>
            	<para>
                    An <see cref="E:SocketTools.SocketWrench.OnError">OnError</see> event occurs when a method fails.
                </para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ErrorEventArgs.Error">
            <summary>Gets a value which specifies the last error that has occurred.</summary>
            <value>
            	<see cref="T:SocketTools.SocketWrench.ErrorCode">ErrorCode</see> enumeration which specifies the
                error.
            </value>
            <seealso cref="P:SocketTools.SocketWrench.ErrorEventArgs.Description">Description Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.ErrorEventArgs.Description">
            <summary>Gets a value which describes the last error that has occurred.</summary>
            <value>A string which describes the last error that has occurred.</value>
            <seealso cref="P:SocketTools.SocketWrench.ErrorEventArgs.Error">Error Property</seealso>
        </member>
        <member name="T:SocketTools.SocketWrench.ProgressEventArgs">
            <summary>Provides data for the OnProgress event.</summary>
            <remarks>
            	<para><strong>ProgressEventArgs</strong> specifies the number of bytes copied from
                the data stream, the total number of bytes in the data stream and a completion
                percentage.</para>
            	<para>
                    The <see cref="E:SocketTools.SocketWrench.OnProgress">OnProgress</see> event occurs as a data stream is
                    being read or written to the socket. This event only occurs when the
                    <strong>ReadStream</strong>, <strong>WriteStream</strong> or
                    <strong>StoreStream</strong> methods are called.
                </para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrench.ProgressEventArgs.BytesCopied">
            <summary>
            Gets a value which specifies the number of bytes of data that has been read or
            written.
            </summary>
            <value>An integer value which specifies the number of bytes of data.</value>
            <remarks>
            The <strong>BytesCopied</strong> property specifies the number of bytes that have
            been read from the socket and stored in the local stream buffer, or written from the
            stream buffer to the socket.
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.BytesTotal">BytesTotal Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.Percent">Percent Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.ProgressEventArgs.BytesTotal">
            <summary>Gets a value which specifies the total number of bytes in the data stream.</summary>
            <value>An integer value which specifies the number of bytes of data.</value>
            <remarks>
            	<para>The <strong>BytesTotal</strong> property specifies the total amount of data
                being read from the socket and stored in the data stream, or written from the data
                stream to the socket. If the amount of data was unknown or unspecified at the time
                the method call was made, then this value will always be the same as the
                <strong>BytesCopied</strong> property.</para>
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.BytesCopied">BytesCopied Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.Percent">Percent Property</seealso>
        </member>
        <member name="P:SocketTools.SocketWrench.ProgressEventArgs.Percent">
            <summary>
            Gets a value which specifies the percentage of data that has been read or
            written.
            </summary>
            <value>An integer value which specifies a percentage.</value>
            <remarks>
            The <strong>Percent</strong> property specifies the percentage of data that has
            been transmitted, expressed as an integer value between 0 and 100, inclusive. If the
            maximum size of the data stream was not specified by the caller, this value will always
            be 100.
            </remarks>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.BytesCopied">BytesCopied Property</seealso>
            <seealso cref="P:SocketTools.SocketWrench.ProgressEventArgs.BytesTotal">BytesTotal Property</seealso>
        </member>
        <member name="T:SocketTools.SocketWrenchException">
            <summary>The exception that is thrown when a socket error occurs.</summary>
            <remarks>
            	<para>A SocketWrenchException is thrown by the SocketWrench class when an error
                occurs.</para>
            	<para>The default constructor for the SocketWrenchException class sets the
                <strong>ErrorCode</strong> property to the last socket error that occurred.</para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrenchException.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:SocketTools.SocketWrenchException">SocketWrenchException</see> class with the last
                network error code.
            </summary>
            <remarks>
            	<para>
                    The ctor constructor sets the <strong>ErrorCode</strong> property to the last
                    socket error that occurred. For more information about the errors that may
                    occur, refer to the
                    <see cref="T:SocketTools.SocketWrench.ErrorCode">SocketWrench.ErrorCode</see> enumeration.
                </para>
            </remarks>
        </member>
        <member name="M:SocketTools.SocketWrenchException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:SocketTools.SocketWrenchException">SocketWrenchException</see> class with a
                specified error message.
            </summary>
            <remarks>
            	<para>The content of the <i>message</i> parameter is intended to be understood by
                humans. The caller of this constructor is required to ensure that this string has
                been localized for the current system culture.</para>
            </remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:SocketTools.SocketWrenchException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the
                <see cref="T:SocketTools.SocketWrenchException">SocketWrenchException</see> class with a
                specified error message and a reference to the inner exception that is the cause of
                this exception.
            </summary>
            <remarks>
            	<para>The content of the message parameter is intended to be understood by humans.
                The caller of this constructor is required to ensure that this string has been
                localized for the current system culture.</para>
            	<para>An exception that is thrown as a direct result of a previous exception should
                include a reference to the previous exception in the
                <strong>InnerException</strong> property. The <strong>InnerException</strong>
                property returns the same value that is passed into the constructor, or a null
                reference if the <strong>InnerException</strong> property does not supply the inner
                exception value to the constructor.</para>
            </remarks>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the
            <em>innerException</em> parameter is not a null reference, the current exception is
            raised in a <strong>catch</strong> block that handles the inner exception.
            </param>
        </member>
        <member name="M:SocketTools.SocketWrenchException.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the
                <see cref="T:SocketTools.SocketWrenchException">SocketWrenchException</see> class with a specified
                error number.
            </summary>
            <remarks>
            	<para>
                    This constructor sets the <strong>ErrorCode</strong> property to the specified
                    error code. For more information about the errors that may occur, refer to the
                    <see cref="T:SocketTools.SocketWrench.ErrorCode">SocketWrench.ErrorCode</see> enumeration.
                </para>
            </remarks>
            <param name="code">An integer value which specifies an error code.</param>
        </member>
        <member name="M:SocketTools.SocketWrenchException.ToString">
            <summary>Creates and returns a string representation of the current exception.</summary>
            <returns>A string representation of the current exception.</returns>
            <remarks>
            	<para>The <strong>ToString</strong> method returns a representation of the current
                exception that is intended to be understood by humans. Where the exception contains
                culture-sensitive data, the string representation returned by
                <strong>ToString</strong> is required to take into account the current system
                culture. Although there are no exact requirements for the format of the returned
                string, it should attempt to reflect the value of the object as perceived by the
                user.</para>
            	<para>This implementation of <strong>ToString</strong> obtains the numeric error
                code value and a description of the error that caused the current exception. If
                there is no error message or it is an empty string, then no error message is
                returned.</para>
            	<para>This method overrides <strong>ApplicationException.ToString</strong>.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrenchException.ErrorCode">
            <summary>Gets a value which specifies the error that caused the exception.</summary>
            <value>
                Returns a <see cref="T:SocketTools.SocketWrench.ErrorCode">SocketWrench.ErrorCode</see>
                enumeration value which specifies the error code.
            </value>
            <remarks>
            	<para>The <strong>ErrorCode</strong> property returns the error code that specifies
                the cause of the exception.</para>
            	<para>
                    The default constructor for the
                    <see cref="T:SocketTools.SocketWrenchException">SocketWrenchException</see> class sets the
                    error code to the last network error that occurred. For more information about
                    the errors that may occur, refer to the
                    <see cref="T:SocketTools.SocketWrench.ErrorCode">SocketWrench.ErrorCode</see> enumeration.
                </para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrenchException.Message">
            <summary>Gets a value which describes the error that caused the exception.</summary>
            <value>A string which describes the error that caused the exception.</value>
            <remarks>
            	<para>The <strong>Message</strong> property returns a string which describes the
                error that caused the exception.</para>
            </remarks>
        </member>
        <member name="P:SocketTools.SocketWrenchException.Number">
            <summary>
            Gets a value which specifies the numeric value of the error that caused the
            exception.
            </summary>
            <value>An integer value that specifies the error that caused the exception.</value>
            <remarks>
            The <strong>Number</strong> property returns an integer value which specifies the
            numeric value of the error that caused the exception. This value is the same as the
            values returned by the Windows Sockets API. For more information about socket error
            codes, see the Windows Socket Version 2 API error code documentation in MSDN.
            </remarks>
        </member>
    </members>
</doc>
